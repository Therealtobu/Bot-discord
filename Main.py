import os
import discord
from discord.ext import commands, tasks
import asyncio
import aiohttp
import re
from datetime import datetime, timedelta, timezone
from keep_alive import keep_alive
import random

# -------------------------
# C·∫•u h√¨nh bot
# -------------------------
DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")

# Verify Config
ROLE_ID = 1400724722714542111
VERIFY_CHANNEL_ID = 1400732340677771356

# Ticket Config
GUILD_ID = 1372215595218505891
TICKET_CHANNEL_ID = 1400750812912685056
SUPPORTERS = ["__tobu", "caycotbietmua"]

# Anti-Spam & Filter Config
SPAM_LIMIT = 5
TIME_WINDOW = 30
MUTE_TIME = 900
MUTE_ROLE_ID = 1402205863510282240
LOG_CHANNEL_ID = 1402205862985994361

# Voice Channel Hi·ªÉn Th·ªã Th√†nh Vi√™n
MEMBER_COUNT_CHANNEL_ID = 1402556153275093024

# Log Join/Leave
JOIN_CHANNEL_ID = 1402563416219975791
LEAVE_CHANNEL_ID = 1402564378569736272

# TikTok Notify
TIKTOK_USERNAME = "caycotbietmua"
TIKTOK_NOTIFY_CHANNEL_ID = 1402191653531549807
TIKTOK_CHECK_INTERVAL = 300  # 5 ph√∫t
last_tiktok_video_id = None

user_messages = {}

# Link b·ªã c·∫•m
BLOCK_LINKS = ["youtube.com", "facebook.com"]

# T·ª´ c·∫•m
BAD_WORDS = ["ƒëm", "ƒë·ªãt", "l·ªìn", "bu·ªìi", "c·∫∑c", "m·∫π m√†y", "fuck", "bitch", "dm", "cc"]

# Intents
intents = discord.Intents.default()
intents.members = True
intents.presences = True
intents.message_content = True

bot = commands.Bot(command_prefix="/", intents=intents)

# -------------------------
# Verify Button
# -------------------------
class VerifyButton(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="‚úÖ Verify / X√°c Th·ª±c", style=discord.ButtonStyle.green)
    async def verify_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        role = interaction.guild.get_role(ROLE_ID)
        member = interaction.user

        if role in member.roles:
            await interaction.response.send_message("‚úÖ B·∫°n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c tr∆∞·ªõc ƒë√≥!", ephemeral=True)
        else:
            await member.add_roles(role)
            await interaction.response.send_message("üéâ B·∫°n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c th√†nh c√¥ng!", ephemeral=True)

# -------------------------
# Ticket Buttons
# -------------------------
class CloseTicketView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="üîí Close Ticket", style=discord.ButtonStyle.red)
    async def close(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_message("üîí Ticket s·∫Ω b·ªã ƒë√≥ng...", ephemeral=True)
        await interaction.channel.delete()

class CreateTicketView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="üì© T·∫°o Ticket", style=discord.ButtonStyle.green)
    async def create_ticket(self, interaction: discord.Interaction, button: discord.ui.Button):
        guild = bot.get_guild(GUILD_ID)
        supporters_online = [m for m in guild.members if m.name in SUPPORTERS and m.status != discord.Status.offline]

        if not supporters_online:
            await interaction.response.send_message("‚ùå Kh√¥ng c√≥ supporter n√†o online.", ephemeral=True)
            return

        supporter = random.choice(supporters_online)

        await interaction.response.send_message(
            f"‚úÖ **{supporter.display_name}** s·∫Ω h·ªó tr·ª£ b·∫°n.",
            ephemeral=True
        )

        overwrites = {
            guild.default_role: discord.PermissionOverwrite(view_channel=False),
            interaction.user: discord.PermissionOverwrite(view_channel=True, send_messages=True),
            supporter: discord.PermissionOverwrite(view_channel=True, send_messages=True),
            guild.me: discord.PermissionOverwrite(view_channel=True, send_messages=True)
        }
        ticket_channel = await guild.create_text_channel(
            f"ticket-{interaction.user.name}",
            overwrites=overwrites
        )

        embed = discord.Embed(
            title="üé´ Ticket H·ªó Tr·ª£",
            description=f"{supporter.mention} s·∫Ω h·ªó tr·ª£ b·∫°n.\nVui l√≤ng m√¥ t·∫£ v·∫•n ƒë·ªÅ.",
            color=discord.Color.blue()
        )
        await ticket_channel.send(content=interaction.user.mention, embed=embed, view=CloseTicketView())

# -------------------------
# On Ready
# -------------------------
@bot.event
async def on_ready():
    print(f"‚úÖ Bot ƒë√£ ƒëƒÉng nh·∫≠p: {bot.user}")

    verify_channel = bot.get_channel(VERIFY_CHANNEL_ID)
    if verify_channel:
        embed = discord.Embed(
            title="X√°c Th·ª±c Th√†nh Vi√™n",
            description="B·∫•m n√∫t **Verify/X√°c Th·ª±c** ƒë·ªÉ tham gia.\n‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è",
            color=discord.Color.green()
        )
        await verify_channel.send(embed=embed, view=VerifyButton())

    ticket_channel = bot.get_channel(TICKET_CHANNEL_ID)
    if ticket_channel:
        embed = discord.Embed(
            title="üì¢ H·ªó Tr·ª£",
            description="B·∫•m **T·∫°o Ticket** n·∫øu c·∫ßn h·ªó tr·ª£.\nKh√¥ng spam ticket!",
            color=discord.Color.orange()
        )
        await ticket_channel.send(embed=embed, view=CreateTicketView())

    update_member_count.start()
    check_tiktok_new_video.start()

# -------------------------
# C·∫≠p nh·∫≠t s·ªë th√†nh vi√™n & online
# -------------------------
@tasks.loop(minutes=1)
async def update_member_count():
    guild = bot.get_guild(GUILD_ID)
    if not guild:
        return

    total_members = len([m for m in guild.members if not m.bot and not m.system])
    online_members = len([m for m in guild.members if not m.bot and not m.system and m.status != discord.Status.offline])

    channel = guild.get_channel(MEMBER_COUNT_CHANNEL_ID)
    if channel:
        await channel.edit(name=f"üìä {total_members} th√†nh vi√™n | üü¢ {online_members} online")
        overwrite = discord.PermissionOverwrite(connect=False, view_channel=True, send_messages=False)
        await channel.set_permissions(guild.default_role, overwrite=overwrite)

# -------------------------
# Th√¥ng b√°o khi c√≥ ng∆∞·ªùi v√†o / r·ªùi
# -------------------------
@bot.event
async def on_member_join(member):
    if member.bot or member.system:
        return
    channel = bot.get_channel(JOIN_CHANNEL_ID)
    if channel:
        embed = discord.Embed(
            title="üëã Ch√†o m·ª´ng!",
            description=f"Xin ch√†o {member.mention}!",
            color=discord.Color.green()
        )
        embed.set_thumbnail(url=member.avatar.url if member.avatar else member.default_avatar.url)
        embed.timestamp = datetime.now(timezone.utc)
        await channel.send(embed=embed)

@bot.event
async def on_member_remove(member):
    if member.bot or member.system:
        return
    channel = bot.get_channel(LEAVE_CHANNEL_ID)
    if channel:
        embed = discord.Embed(
            title="üëã T·∫°m bi·ªát!",
            description=f"**{member.name}** ƒë√£ r·ªùi server.",
            color=discord.Color.red()
        )
        embed.set_thumbnail(url=member.avatar.url if member.avatar else member.default_avatar.url)
        embed.timestamp = datetime.now(timezone.utc)
        await channel.send(embed=embed)

# -------------------------
# Mute + X√≥a tin nh·∫Øn + Log
# -------------------------
async def mute_and_log(message, reason="vi ph·∫°m"):
    try:
        mute_role = message.guild.get_role(MUTE_ROLE_ID)
        if not mute_role:
            return

        async for msg in message.channel.history(limit=200):
            if msg.author == message.author and (datetime.now(timezone.utc) - msg.created_at).seconds <= TIME_WINDOW:
                try:
                    await msg.delete()
                except:
                    pass

        await message.author.add_roles(mute_role)

        log_channel = bot.get_channel(LOG_CHANNEL_ID)
        if log_channel:
            embed = discord.Embed(
                title="üö® Vi ph·∫°m",
                description=f"**{message.author.mention}** b·ªã mute 15 ph√∫t.\n**L√Ω do:** {reason}",
                color=discord.Color.red()
            )
            embed.add_field(name="Tin nh·∫Øn", value=message.content or "*Kh√¥ng c√≥*", inline=False)
            embed.add_field(name="K√™nh", value=message.channel.mention, inline=True)
            embed.timestamp = datetime.now(timezone.utc)
            await log_channel.send(embed=embed)

        await asyncio.sleep(MUTE_TIME)
        await message.author.remove_roles(mute_role)

    except Exception as e:
        print(f"L·ªói mute_and_log: {e}")

# -------------------------
# On Message (Filter + Anti-Spam)
# -------------------------
@bot.event
async def on_message(message):
    if message.author.bot:
        return

    content_lower = message.content.lower()

    if any(bad_word in content_lower for bad_word in BAD_WORDS):
        await mute_and_log(message, "d√πng t·ª´ ng·ªØ t·ª•c tƒ©u")
        return

    if any(block in content_lower for block in BLOCK_LINKS):
        await mute_and_log(message, "g·ª≠i link b·ªã c·∫•m")
        return

    now = datetime.now()
    uid = message.author.id
    if uid not in user_messages:
        user_messages[uid] = []
    user_messages[uid].append(now)
    user_messages[uid] = [t for t in user_messages[uid] if now - t < timedelta(seconds=TIME_WINDOW)]

    if len(user_messages[uid]) > SPAM_LIMIT:
        await mute_and_log(message, "spam tin nh·∫Øn")
        user_messages[uid] = []
        return

    await bot.process_commands(message)

# -------------------------
# TikTok Checking
# -------------------------
async def fetch_latest_tiktok_video_id():
    url = f"https://www.tiktok.com/@{TIKTOK_USERNAME}?lang=en"
    headers = {"User-Agent": "Mozilla/5.0"}
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as response:
            text = await response.text()
            match = re.search(r'"id":"(\d{19})"', text)
            return match.group(1) if match else None

@tasks.loop(seconds=TIKTOK_CHECK_INTERVAL)
async def check_tiktok_new_video():
    global last_tiktok_video_id
    try:
        latest_id = await fetch_latest_tiktok_video_id()
        if latest_id and latest_id != last_tiktok_video_id:
            last_tiktok_video_id = latest_id
            channel = bot.get_channel(TIKTOK_NOTIFY_CHANNEL_ID)
            if channel:
                await channel.send(f"üé• TikTok m·ªõi: https://www.tiktok.com/@{TIKTOK_USERNAME}/video/{latest_id}")
    except Exception as e:
        print(f"L·ªói check TikTok: {e}")

# -------------------------
# Run Bot
# -------------------------
keep_alive()

if not DISCORD_TOKEN:
    print("‚ùå Ch∆∞a ƒë·∫∑t DISCORD_TOKEN")
else:
    bot.run(DISCORD_TOKEN)
