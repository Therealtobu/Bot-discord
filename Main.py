import os
import discord
from discord.ext import commands, tasks
import asyncio
from datetime import datetime, timedelta, timezone
from keep_alive import keep_alive
import random
import json
import re

# -------------------------
# C·∫•u h√¨nh bot
# -------------------------
DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")

# Verify Config
ROLE_ID = 1400724722714542111
VERIFY_CHANNEL_ID = 1400732340677771356

# Ticket Config
GUILD_ID = 1372215595218505891
TICKET_CHANNEL_ID = 1400750812912685056
SUPPORTERS = ["__tobu", "caycotbietmua"]

# Anti-Spam & Filter Config
SPAM_LIMIT = 5
TIME_WINDOW = 30  # gi√¢y
MUTE_TIME = 900  # 15 ph√∫t
MUTE_ROLE_ID = 1402205863510282240
LOG_CHANNEL_ID = 1402205862985994361

# Voice Channel Hi·ªÉn Th·ªã Th√†nh Vi√™n
MEMBER_COUNT_CHANNEL_ID = 1402556153275093024

# Log Join/Leave
JOIN_CHANNEL_ID = 1402563416219975791
LEAVE_CHANNEL_ID = 1402564378569736272

# Caro Config
CARO_CHANNEL_ID = 1402622963823546369
BOARD_SIZES = {"3x3": 3, "5x5": 5}
games = {}
board_messages = {}
control_messages = {}
selected_board_size = {}

# Link b·ªã c·∫•m
BLOCK_LINKS = ["youtube.com", "facebook.com"]

# T·ª´ c·∫•m
BAD_WORDS = ["ƒëm", "ƒë·ªãt", "l·ªìn", "bu·ªìi", "c·∫∑c", "m·∫π m√†y", "fuck", "bitch", "dm", "cc"]

# Slot Config
SLOT_CHANNEL_ID = 1405959238240702524   # Thay b·∫±ng ID k√™nh slot c·ªë ƒë·ªãnh
ADMIN_ROLE_ID = 1404851048052559872  # Thay b·∫±ng ID vai tr√≤ admin
symbols = ['üçí', 'üçã', 'üçâ', '7', '‚≠ê', 'üíé']
multipliers = [2, 3, 4, 5, 10, 20]

data = {}
try:
    with open('/data/data.json', 'r') as f:  # D√πng Render Disk
        loaded = json.load(f)
        data = {
            k: {
                'money': v['money'],
                'last_daily': datetime.fromisoformat(v['last_daily']) if v['last_daily'] else None,
                'spin_count': v.get('spin_count', 0),
                'ban_until': datetime.fromisoformat(v['ban_until']) if v['ban_until'] else None,
                'spin_timestamps': [datetime.fromisoformat(t) for t in v.get('spin_timestamps', [])]
            } for k, v in loaded.items()
        }
except FileNotFoundError:
    pass

def save_data():
    with open('/data/data.json', 'w') as f:  # D√πng Render Disk
        json.dump({
            k: {
                'money': v['money'],
                'last_daily': v['last_daily'].isoformat() if v['last_daily'] else None,
                'spin_count': v.get('spin_count', 0),
                'ban_until': v['ban_until'].isoformat() if v['ban_until'] else None,
                'spin_timestamps': [t.isoformat() for t in v.get('spin_timestamps', [])]
            } for k, v in data.items()
        }, f)

def get_weights(tier):
    # TƒÉng m·∫°nh x√°c su·∫•t tr√∫ng khi tier cao
    w = [100 - 5 * tier, 90 - 4 * tier, 80 - 3 * tier, 70 - 2 * tier, 50 + 5 * tier, 30 + 15 * tier]
    w = [max(10, x) for x in w]
    return w

def spin(tier):
    weights = get_weights(tier)
    reels = random.choices(symbols, weights=weights, k=3)
    return reels

def get_payout(reels, bet):
    if reels[0] == reels[1] == reels[2]:
        # Tr√πng 3 bi·ªÉu t∆∞·ª£ng: Nh√¢n theo h·ªá s·ªë
        idx = symbols.index(reels[0])
        return bet * multipliers[idx]
    elif reels[0] == reels[1] or reels[1] == reels[2] or reels[0] == reels[2]:
        # Tr√πng 2 bi·ªÉu t∆∞·ª£ng: Nh·∫≠n 1.5x ti·ªÅn c∆∞·ª£c
        return int(bet * 1.5)
    else:
        # Kh√¥ng tr√πng: Nh·∫≠n l·∫°i 50% ti·ªÅn c∆∞·ª£c
        return int(bet * 0.5)

# Intents
intents = discord.Intents.default()
intents.members = True
intents.presences = True
intents.message_content = True

bot = commands.Bot(command_prefix="/", intents=intents)

# -------------------------
# Caro Game Class
# -------------------------
class CaroGame:
    def __init__(self, player1, player2=None, is_bot=False, size=5):
        self.size = size
        self.board = [[" " for _ in range(size)] for _ in range(size)]
        self.player1 = player1
        self.player2 = player2
        self.is_bot = is_bot
        self.current_player = player1
        self.symbols = {player1: "X", player2: "O" if player2 else "O"}
        self.buttons = []
        self.last_move_time = asyncio.get_event_loop().time()

    def create_board(self):
        self.buttons = []
        for i in range(self.size):
            row = []
            for j in range(self.size):
                label = "‚¨ú" if self.board[i][j] == " " else ("‚ùå" if self.board[i][j] == "X" else "‚≠ï")
                style = discord.ButtonStyle.secondary if self.board[i][j] == " " else (
                    discord.ButtonStyle.success if self.board[i][j] == "X" else discord.ButtonStyle.danger
                )
                row.append(discord.ui.Button(label=label, style=style, custom_id=f"caro_{i}_{j}", disabled=self.board[i][j] != " ", row=i))
            self.buttons.append(row)

    def reset_board(self):
        self.board = [[" " for _ in range(self.size)] for _ in range(self.size)]
        self.current_player = self.player1
        self.last_move_time = asyncio.get_event_loop().time()
        self.create_board()

    def check_winner(self, symbol):
        for row in self.board:
            for i in range(self.size - 2):
                if row[i:i+3] == [symbol, symbol, symbol]:
                    return True
        for j in range(self.size):
            for i in range(self.size - 2):
                if [self.board[i+k][j] for k in range(3)] == [symbol, symbol, symbol]:
                    return True
        for i in range(self.size - 2):
            for j in range(self.size - 2):
                if [self.board[i+k][j+k] for k in range(3)] == [symbol, symbol, symbol]:
                    return True
        for i in range(self.size - 2):
            for j in range(2, self.size):
                if [self.board[i+k][j-k] for k in range(3)] == [symbol, symbol, symbol]:
                    return True
        if all(self.board[i][j] != " " for i in range(self.size) for j in range(self.size)):
            return "draw"
        return False

    def bot_move(self):
        empty_cells = [(i, j) for i in range(self.size) for j in range(self.size) if self.board[i][j] == " "]
        if empty_cells:
            return random.choice(empty_cells)
        return None

# -------------------------
# Verify Button
# -------------------------
class VerifyButton(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="‚úÖ Verify / X√°c Th·ª±c", style=discord.ButtonStyle.success)
    async def verify_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        role = interaction.guild.get_role(ROLE_ID)
        member = interaction.user

        if role in member.roles:
            await interaction.response.send_message("‚úÖ B·∫°n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c tr∆∞·ªõc ƒë√≥!", ephemeral=True)
        else:
            await member.add_roles(role)
            await interaction.response.send_message("üéâ B·∫°n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c th√†nh c√¥ng!", ephemeral=True)

# -------------------------
# Ticket Buttons
# -------------------------
class CloseTicketView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="üîí Close Ticket", style=discord.ButtonStyle.danger)
    async def close(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_message("üîí Ticket s·∫Ω b·ªã ƒë√≥ng trong 3 gi√¢y...", ephemeral=True)
        await asyncio.sleep(3)
        await interaction.channel.delete()

class CreateTicketView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="üì© T·∫°o Ticket", style=discord.ButtonStyle.success)
    async def create_ticket(self, interaction: discord.Interaction, button: discord.ui.Button):
        guild = bot.get_guild(GUILD_ID)
        supporters_online = []

        for member in guild.members:
            if member.name in SUPPORTERS and member.status != discord.Status.offline:
                supporters_online.append(member)

        if not supporters_online:
            await interaction.response.send_message("‚ùå Hi·ªán kh√¥ng c√≥ supporter n√†o online, vui l√≤ng th·ª≠ l·∫°i sau.", ephemeral=True)
            return

        supporter = random.choice(supporters_online)

        await interaction.response.send_message(
            f"‚úÖ **{supporter.display_name}** ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t ƒë·ªÉ h·ªó tr·ª£ cho b·∫°n, vui l√≤ng ki·ªÉm tra ticket m·ªõi!",
            ephemeral=True
        )

        overwrites = {
            guild.default_role: discord.PermissionOverwrite(view_channel=False),
            interaction.user: discord.PermissionOverwrite(view_channel=True, send_messages=True),
            supporter: discord.PermissionOverwrite(view_channel=True, send_messages=True),
            guild.me: discord.PermissionOverwrite(view_channel=True, send_messages=True)
        }
        ticket_channel = await guild.create_text_channel(
            f"ticket-{interaction.user.name}",
            overwrites=overwrites
        )

        embed = discord.Embed(
            title="üé´ Ticket H·ªó Tr·ª£",
            description=f"{supporter.mention} s·∫Ω s·ªõm h·ªó tr·ª£ b·∫°n.\nVui l√≤ng n√≥i v·∫•n ƒë·ªÅ b·∫°n c·∫ßn h·ªó tr·ª£.",
            color=discord.Color.blue()
        )
        await ticket_channel.send(content=interaction.user.mention, embed=embed, view=CloseTicketView())

# -------------------------
# On Ready
# -------------------------
@bot.event
async def on_ready():
    print(f"‚úÖ Bot ƒë√£ ƒëƒÉng nh·∫≠p: {bot.user}")
    print(f"Current directory: {os.getcwd()}")
    print(f"Can write to directory: {os.access('/data', os.W_OK)}")

    try:
        # Verify Embed
        verify_channel = bot.get_channel(VERIFY_CHANNEL_ID)
        if verify_channel:
            async for msg in verify_channel.history(limit=50):
                if msg.author == bot.user:
                    try:
                        await msg.delete()
                    except:
                        pass
            embed = discord.Embed(
                title="X√°c Th·ª±c Th√†nh Vi√™n",
                description="B·∫•m n√∫t **Verify/X√°c Th·ª±c** ·ªü d∆∞·ªõi ƒë·ªÉ c√≥ th·ªÉ t∆∞∆°ng t√°c trong nh√≥m\n‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è",
                color=discord.Color.green()
            )
            await verify_channel.send(embed=embed, view=VerifyButton())
        else:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y k√™nh verify: {VERIFY_CHANNEL_ID}")

        # Ticket Embed
        ticket_channel = bot.get_channel(TICKET_CHANNEL_ID)
        if ticket_channel:
            async for msg in ticket_channel.history(limit=50):
                if msg.author == bot.user:
                    try:
                        await msg.delete()
                    except:
                        pass
            embed = discord.Embed(
                title="üì¢ H·ªó Tr·ª£",
                description="N·∫øu b·∫°n c·∫ßn **H·ªó Tr·ª£** h√£y b·∫•m n√∫t **T·∫°o Ticket** ·ªü d∆∞·ªõi\n"
                            "---------------------\n"
                            "L∆ØU √ù: V√¨ c√°c Mod kh√° b·∫≠n n√™n vi·ªác Support v·∫•n ƒë·ªÅ s·∫Ω kh√° l√¢u v√† **Tuy·ªát ƒë·ªëi kh√¥ng ƒë∆∞·ª£c spam nhi·ªÅu ticket**.\n"
                            "Khi t·∫°o ticket th√¨ **n√≥i th·∫≥ng v·∫•n ƒë·ªÅ lu√¥n**.\n"
                            "N·∫øu kh√¥ng tu√¢n th·ªß c√°c lu·∫≠t tr√™n s·∫Ω b·ªã **mute 1 ng√†y**.",
                color=discord.Color.orange()
            )
            await ticket_channel.send(embed=embed, view=CreateTicketView())
        else:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y k√™nh ticket: {TICKET_CHANNEL_ID}")

        # Caro Embed
        caro_channel = bot.get_channel(CARO_CHANNEL_ID)
        if caro_channel:
            async for msg in caro_channel.history(limit=50):
                if msg.author == bot.user:
                    try:
                        await msg.delete()
                    except:
                        pass
            embed = discord.Embed(
                title="C·ªù Caro",
                description="Ch·ªçn ch·∫ø ƒë·ªô ch∆°i v√† k√≠ch th∆∞·ªõc b·∫£ng:",
                color=discord.Color.blue()
            )
            view = discord.ui.View()
            try:
                view.add_item(discord.ui.Button(label="Ch∆°i v·ªõi m√°y", style=discord.ButtonStyle.success, custom_id="play_bot"))
                view.add_item(discord.ui.Button(label="Ch∆°i v·ªõi ng∆∞·ªùi", style=discord.ButtonStyle.primary, custom_id="play_human"))
                select = discord.ui.Select(placeholder="Ch·ªçn k√≠ch th∆∞·ªõc b·∫£ng", options=[
                    discord.SelectOption(label="3x3", value="3x3"),
                    discord.SelectOption(label="5x5", value="5x5")
                ], custom_id="board_size")
                view.add_item(select)
                await caro_channel.send(embed=embed, view=view)
                print(f"‚úÖ Sent caro embed to channel: {caro_channel.name}")
            except Exception as e:
                print(f"‚ùå L·ªói khi g·ª≠i embed caro: {e}")
        else:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y k√™nh caro: {CARO_CHANNEL_ID}")

        # Kh·ªüi ƒë·ªông c·∫≠p nh·∫≠t s·ªë th√†nh vi√™n
        update_member_count.start()

    except Exception as e:
        print(f"‚ùå L·ªói trong on_ready: {e}")

# -------------------------
# C·∫≠p nh·∫≠t s·ªë th√†nh vi√™n & online
# -------------------------
@tasks.loop(minutes=1)
async def update_member_count():
    guild = bot.get_guild(GUILD_ID)
    if not guild:
        return

    total_members = len([m for m in guild.members if not m.bot and not m.system])
    online_members = len([m for m in guild.members if not m.bot and not m.system and m.status != discord.Status.offline])

    channel = guild.get_channel(MEMBER_COUNT_CHANNEL_ID)
    if channel:
        try:
            await channel.edit(name=f"üìä {total_members} th√†nh vi√™n | üü¢ {online_members} online")
            overwrite = discord.PermissionOverwrite(connect=False, view_channel=True, send_messages=False)
            await channel.set_permissions(guild.default_role, overwrite=overwrite)
        except Exception as e:
            print(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t s·ªë th√†nh vi√™n: {e}")

# -------------------------
# Th√¥ng b√°o khi c√≥ ng∆∞·ªùi v√†o / r·ªùi
# -------------------------
@bot.event
async def on_member_join(member):
    if member.bot or member.system:
        return
    channel = bot.get_channel(JOIN_CHANNEL_ID)
    if channel:
        try:
            embed = discord.Embed(
                title="üëã Ch√†o m·ª´ng th√†nh vi√™n m·ªõi!",
                description=f"Xin ch√†o {member.mention}, ch√∫c b·∫°n vui v·∫ª trong server!",
                color=discord.Color.green()
            )
            embed.set_thumbnail(url=member.avatar.url if member.avatar else member.default_avatar.url)
            embed.timestamp = datetime.now(timezone.utc)
            await channel.send(embed=embed)
        except Exception as e:
            print(f"‚ùå L·ªói khi g·ª≠i th√¥ng b√°o member join: {e}")

@bot.event
async def on_member_remove(member):
    if member.bot or member.system:
        return
    channel = bot.get_channel(LEAVE_CHANNEL_ID)
    if channel:
        try:
            embed = discord.Embed(
                title="üëã T·∫°m bi·ªát!",
                description=f"Th√†nh vi√™n **{member.name}** ƒë√£ r·ªùi kh·ªèi server.",
                color=discord.Color.red()
            )
            embed.set_thumbnail(url=member.avatar.url if member.avatar else member.default_avatar.url)
            embed.timestamp = datetime.now(timezone.utc)
            await channel.send(embed=embed)
        except Exception as e:
            print(f"‚ùå L·ªói khi g·ª≠i th√¥ng b√°o member leave: {e}")

# -------------------------
# Mute + X√≥a tin nh·∫Øn + Log
# -------------------------
async def mute_and_log(message, reason="vi ph·∫°m"):
    try:
        mute_role = message.guild.get_role(MUTE_ROLE_ID)
        if not mute_role:
            print("‚ùå Kh√¥ng t√¨m th·∫•y role mute!")
            return

        async for msg in message.channel.history(limit=50):
            if msg.author == message.author and (datetime.now(timezone.utc) - msg.created_at).seconds <= TIME_WINDOW:
                try:
                    await msg.delete()
                except:
                    pass

        await message.author.add_roles(mute_role)

        log_channel = bot.get_channel(LOG_CHANNEL_ID)
        if log_channel:
            embed = discord.Embed(
                title="üö® Ph√°t hi·ªán vi ph·∫°m",
                description=f"**Ng∆∞·ªùi vi ph·∫°m:** {message.author.mention}\n**L√Ω do:** {reason}\n**Th·ªùi gian mute:** 15 ph√∫t",
                color=discord.Color.red()
            )
            embed.add_field(name="N·ªôi dung", value=message.content or "*Kh√¥ng c√≥ n·ªôi dung*", inline=False)
            embed.add_field(name="K√™nh", value=message.channel.mention, inline=True)
            embed.timestamp = datetime.now(timezone.utc)
            await log_channel.send(embed=embed)

        await asyncio.sleep(MUTE_TIME)
        await message.author.remove_roles(mute_role)

    except Exception as e:
        print(f"‚ùå L·ªói mute_and_log: {e}")

# -------------------------
# On Message (Filter + Anti-Spam + Slot Commands)
# -------------------------
user_messages = {}

@bot.event
async def on_message(message):
    if message.author.bot:
        return

    content_lower = message.content.lower()

    # Extract URLs and check bad words only in non-URL parts
    urls = re.findall(r'(https?://\S+)', message.content)
    non_url_content = re.sub(r'https?://\S+', '', content_lower)
    has_bad_word = any(bad_word in non_url_content for bad_word in BAD_WORDS)

    if has_bad_word:
        await mute_and_log(message, "d√πng t·ª´ ng·ªØ t·ª•c tƒ©u")
        return

    if any(block in content_lower for block in BLOCK_LINKS):
        await mute_and_log(message, "g·ª≠i link b·ªã c·∫•m")
        return

    now = datetime.now()
    uid = message.author.id
    if uid not in user_messages:
        user_messages[uid] = []
    user_messages[uid].append(now)
    user_messages[uid] = [t for t in user_messages[uid] if now - t < timedelta(seconds=TIME_WINDOW)]

    if len(user_messages[uid]) > SPAM_LIMIT:
        await mute_and_log(message, "spam tin nh·∫Øn")
        user_messages[uid] = []
        return

    # Slot commands in specific channel without prefix
    if message.channel.id == SLOT_CHANNEL_ID:
        content = message.content.lower().strip().split()
        if not content:
            return

        cmd = content[0]
        user_id = str(message.author.id)

        if cmd == 'help':
            help_msg = "H∆∞·ªõng d·∫´n ch∆°i:\n" \
                       "- spin <s·ªë ti·ªÅn>: Quay slot (c∆∞·ª£c >=100). C∆∞·ª£c cao h∆°n tƒÉng tier (bet//1000, max 5), tƒÉng m·∫°nh x√°c su·∫•t tr√∫ng item x·ªãn.\n" \
                       "- Kh√¥ng tr√πng: Nh·∫≠n l·∫°i 50% ti·ªÅn c∆∞·ª£c.\n" \
                       "- Tr√πng 2 bi·ªÉu t∆∞·ª£ng: Nh·∫≠n 1.5x ti·ªÅn c∆∞·ª£c.\n" \
                       "- Tr√πng 3 bi·ªÉu t∆∞·ª£ng: Nh·∫≠n 2x-20x ti·ªÅn c∆∞·ª£c t√πy bi·ªÉu t∆∞·ª£ng.\n" \
                       "- gift @user <s·ªë ti·ªÅn>: T·∫∑ng ti·ªÅn cho ng∆∞·ªùi kh√°c.\n" \
                       "- daily: Nh·∫≠n 5k ti·ªÅn h√†ng ng√†y.\n" \
                       "- leaderboard: Xem b·∫£ng x·∫øp h·∫°ng ti·ªÅn.\n" \
                       "- add @user <s·ªë ti·ªÅn>: Admin th√™m ti·ªÅn (c√≥ th·ªÉ √¢m).\n" \
                       "- mod @user <s·ªë ti·ªÅn>: Admin set ti·ªÅn.\n" \
                       "L∆∞u √Ω: Quay 10 l·∫ßn trong 1 ph√∫t s·∫Ω b·ªã 'c·∫£nh s√°t b·∫Øt' (ƒë√πa th√¥i), m·∫•t h·∫øt ti·ªÅn v√† ban ch∆°i 1 ng√†y."
            await message.channel.send(help_msg)
            return

        if user_id not in data:
            data[user_id] = {'money': 10000, 'last_daily': None, 'spin_count': 0, 'ban_until': None, 'spin_timestamps': []}
            save_data()

        if cmd == 'spin':
            if len(content) < 2:
                await message.channel.send("S·ª≠ d·ª•ng: spin <s·ªë ti·ªÅn c∆∞·ª£c>")
                return
            try:
                bet = int(content[1])
                if bet < 100:
                    await message.channel.send("C∆∞·ª£c t·ªëi thi·ªÉu l√† 100")
                    return
            except ValueError:
                await message.channel.send("S·ªë ti·ªÅn c∆∞·ª£c kh√¥ng h·ª£p l·ªá")
                return

            user_data = data[user_id]
            now = datetime.now(timezone.utc)
            if user_data['ban_until'] and user_data['ban_until'] > now:
                await message.channel.send("B·∫°n b·ªã ban ch∆°i trong 1 ng√†y do b·ªã 'c·∫£nh s√°t b·∫Øt' (ƒë√πa th√¥i)!")
                return

            money = user_data['money']
            if money < bet:
                await message.channel.send("Kh√¥ng ƒë·ªß ti·ªÅn")
                return

            # C·∫≠p nh·∫≠t danh s√°ch th·ªùi gian quay
            user_data['spin_timestamps'] = [t for t in user_data.get('spin_timestamps', []) if (now - t).total_seconds() <= 60]
            user_data['spin_timestamps'].append(now)
            user_data['money'] -= bet
            user_data['spin_count'] += 1
            save_data()

            tier = min(bet // 1000, 5)
            reels = spin(tier)

            # Hi·ªáu ·ª©ng quay gi·ªëng m√°y slot
            msg = await message.channel.send("üé∞ ƒêang quay... |")
            spin_anim = ['|', '/', '-', '\\']
            for i in range(6):  # 6 frame ƒë·ªÉ m∆∞·ª£t h∆°n
                await asyncio.sleep(0.3)  # Th·ªùi gian m·ªói frame
                temp_reels = [
                    reels[0] if i >= 2 else random.choice(symbols),
                    reels[1] if i >= 4 else random.choice(symbols),
                    reels[2] if i >= 6 else random.choice(symbols)
                ]
                anim_char = spin_anim[i % len(spin_anim)]
                await msg.edit(content=f"üé∞ ƒêang quay... {anim_char} {' '.join(temp_reels)}")

            final_reels = ' '.join(reels)
            payout = get_payout(reels, bet)
            net = payout - bet

            user_data['money'] += payout
            save_data()

            if reels[0] == reels[1] == reels[2]:
                await msg.edit(content=f"üé∞ {final_reels} B·∫°n th·∫Øng l·ªõn {net}! (T·ªïng {payout}) Ti·ªÅn: {user_data['money']}")
            elif reels[0] == reels[1] or reels[1] == reels[2] or reels[0] == reels[2]:
                await msg.edit(content=f"üé∞ {final_reels} Tr√πng 2! Th·∫Øng {net}! (T·ªïng {payout}) Ti·ªÅn: {user_data['money']}")
            else:
                await msg.edit(content=f"üé∞ {final_reels} Kh√¥ng tr√πng! Nh·∫≠n l·∫°i {payout}. Ti·ªÅn: {user_data['money']}")

            # Check for 'police catch' after spin
            if len(user_data['spin_timestamps']) >= 10:
                await message.channel.send("üöî B·∫°n b·ªã 'c·∫£nh s√°t b·∫Øt' (ƒë√πa th√¥i)! M·∫•t h·∫øt ti·ªÅn v√† kh√¥ng ch∆°i ƒë∆∞·ª£c trong 1 ng√†y.")
                user_data['money'] = 0
                user_data['ban_until'] = now + timedelta(days=1)
                user_data['spin_timestamps'] = []
                user_data['spin_count'] = 0
                save_data()

        elif cmd == 'gift':
            if len(content) < 3 or not message.mentions:
                await message.channel.send("S·ª≠ d·ª•ng: gift @ng∆∞·ªùi_d√πng <s·ªë_ti·ªÅn>")
                return
            target = message.mentions[0]
            if target.bot or target.id == message.author.id:
                return
            try:
                amount = int(content[2])
                if amount <= 0:
                    return
            except ValueError:
                return

            user_data = data[user_id]
            if user_data['money'] < amount:
                await message.channel.send("Kh√¥ng ƒë·ªß ti·ªÅn")
                return

            target_id = str(target.id)
            if target_id not in data:
                data[target_id] = {'money': 0, 'last_daily': None, 'spin_count': 0, 'ban_until': None, 'spin_timestamps': []}

            user_data['money'] -= amount
            data[target_id]['money'] += amount
            save_data()

            await message.channel.send(f"T·∫∑ng {amount} cho {target.mention}")

        elif cmd == 'daily':
            user_data = data[user_id]
            last = user_data['last_daily']
            today = datetime.now(timezone.utc).date()
            if last is None or last.date() < today:
                user_data['money'] += 5000
                user_data['last_daily'] = datetime.now(timezone.utc)
                save_data()
                await message.channel.send(f"Nh·∫≠n 5k h√†ng ng√†y! Ti·ªÅn: {user_data['money']}")
            else:
                await message.channel.send("ƒê√£ nh·∫≠n h√¥m nay r·ªìi.")

        elif cmd == 'leaderboard':
            sorted_users = sorted(data.items(), key=lambda x: x[1]['money'], reverse=True)[:10]
            msg = "B·∫£ng x·∫øp h·∫°ng:\n"
            for i, (uid, d) in enumerate(sorted_users, 1):
                user = bot.get_user(int(uid))
                name = user.name if user else uid
                msg += f"{i}. {name}: {d['money']}\n"
            await message.channel.send(msg)

        elif cmd in ['add', 'mod']:
            is_admin = any(role.id == ADMIN_ROLE_ID for role in message.author.roles)
            if not is_admin:
                return
            if len(content) < 3 or not message.mentions:
                await message.channel.send(f"S·ª≠ d·ª•ng: {cmd} @ng∆∞·ªùi_d√πng <s·ªë_ti·ªÅn>")
                return
            target = message.mentions[0]
            if target.bot:
                return
            try:
                amount = int(content[2])
            except ValueError:
                return

            target_id = str(target.id)
            if target_id not in data:
                data[target_id] = {'money': 0, 'last_daily': None, 'spin_count': 0, 'ban_until': None, 'spin_timestamps': []}

            if cmd == 'add':
                data[target_id]['money'] += amount
            elif cmd == 'mod':
                data[target_id]['money'] = amount
            save_data()

            await message.channel.send(f"ƒê√£ {cmd} ti·ªÅn cho {target.mention} th√†nh {data[target_id]['money']}")

    await bot.process_commands(message)

# -------------------------
# Caro Interaction Handler
# -------------------------
@bot.event
async def on_interaction(interaction: discord.Interaction):
    custom_id = interaction.data.get("custom_id")
    print(f"üîç Interaction received: {custom_id}")

    # X·ª≠ l√Ω menu ch·ªçn k√≠ch th∆∞·ªõc b·∫£ng
    if custom_id == "board_size":
        size = BOARD_SIZES.get(interaction.data.get("values")[0], 5)
        selected_board_size[interaction.user.id] = size
        print(f"üîç User {interaction.user.name} selected board size: {size}x{size}")
        await interaction.response.defer(ephemeral=True)
        return

    # X·ª≠ l√Ω Verify v√† Ticket
    if custom_id == "verify_button":
        await VerifyButton().verify_button(interaction, discord.ui.Button())
    elif custom_id == "create_ticket":
        await CreateTicketView().create_ticket(interaction, discord.ui.Button())
    elif custom_id == "close":
        await CloseTicketView().close(interaction, discord.ui.Button())

    # X·ª≠ l√Ω Caro: Ch∆°i v·ªõi m√°y
    elif custom_id == "play_bot":
        size = selected_board_size.get(interaction.user.id, 5)
        print(f"üîç Board size for play_bot: {size}x{size}")

        guild = interaction.guild
        overwrites = {
            guild.default_role: discord.PermissionOverwrite(view_channel=False),
            interaction.user: discord.PermissionOverwrite(view_channel=True, send_messages=True),
            guild.me: discord.PermissionOverwrite(view_channel=True, send_messages=True)
        }
        try:
            channel = await guild.create_text_channel(f"caro-{interaction.user.name}", overwrites=overwrites)
            print(f"‚úÖ Created channel for play_bot: {channel.name}")
        except Exception as e:
            await interaction.response.send_message(f"‚ùå L·ªói khi t·∫°o k√™nh caro: {e}", ephemeral=True)
            print(f"‚ùå Error creating channel for play_bot: {e}")
            return

        game = CaroGame(interaction.user, is_bot=True, size=size)
        games[channel.id] = game
        game.create_board()

        embed = discord.Embed(title=f"C·ªù Caro {size}x{size}", description=f"L∆∞·ª£t c·ªßa {interaction.user.mention}\nT·ªça ƒë·ªô: A1 = (0,0), B2 = (1,1), ...", color=discord.Color.blue())
        view = discord.ui.View()
        component_count = 0
        for row in game.buttons:
            for button in row:
                if component_count < 23:
                    view.add_item(button)
                    component_count += 1
                else:
                    print(f"‚ùå Skipped adding button: Maximum components reached")

        control_view = discord.ui.View()
        close_button = discord.ui.Button(label="ƒê√≥ng Ticket", style=discord.ButtonStyle.danger, custom_id=f"close_caro_{channel.id}", disabled=True)
        replay_button = discord.ui.Button(label="Ch∆°i l·∫°i", style=discord.ButtonStyle.primary, custom_id=f"replay_{channel.id}", disabled=True)
        control_view.add_item(replay_button)
        control_view.add_item(close_button)

        try:
            board_message = await channel.send(embed=embed, view=view)
            board_messages[channel.id] = board_message.id
            control_message = await channel.send(view=control_view)
            control_messages[channel.id] = control_message.id
            print(f"‚úÖ Sent caro board (message_id: {board_message.id}) and controls (message_id: {control_message.id}) to channel: {channel.name}")
        except Exception as e:
            await interaction.response.send_message(f"‚ùå L·ªói khi g·ª≠i b·∫£ng caro: {e}", ephemeral=True)
            print(f"‚ùå Error sending caro board: {e}")
            return

        await interaction.response.send_message(f"Ticket ƒë√£ ƒë∆∞·ª£c t·∫°o t·∫°i {channel.mention}", ephemeral=True)

        while channel.id in games:
            if asyncio.get_event_loop().time() - games[channel.id].last_move_time > 30:
                try:
                    await channel.send(f"{interaction.user.mention} kh√¥ng thao t√°c trong 30 gi√¢y. Tr√≤ ch∆°i k·∫øt th√∫c!")
                    if channel.id in control_messages:
                        try:
                            control_message = await channel.fetch_message(control_messages[channel.id])
                            control_view = discord.ui.View()
                            close_button = discord.ui.Button(label="ƒê√≥ng Ticket", style=discord.ButtonStyle.danger, custom_id=f"close_caro_{channel.id}", disabled=False)
                            replay_button = discord.ui.Button(label="Ch∆°i l·∫°i", style=discord.ButtonStyle.primary, custom_id=f"replay_{channel.id}", disabled=False)
                            control_view.add_item(replay_button)
                            control_view.add_item(close_button)
                            await control_message.edit(view=control_view)
                            print(f"‚úÖ Enabled control buttons after timeout in channel: {channel.name}")
                        except:
                            print(f"‚ùå Error enabling control buttons after timeout")
                    await channel.delete()
                    if channel.id in games:
                        del games[channel.id]
                    if channel.id in board_messages:
                        del board_messages[channel.id]
                    if channel.id in control_messages:
                        del control_messages[channel.id]
                except:
                    pass
                break
            await asyncio.sleep(5)

    # X·ª≠ l√Ω Caro: Ch∆°i v·ªõi ng∆∞·ªùi
    elif custom_id == "play_human":
        await interaction.response.send_message("Vui l√≤ng tag m·ªôt ng∆∞·ªùi ch∆°i kh√°c (kh√¥ng ph·∫£i bot ho·∫∑c ch√≠nh b·∫°n)!", ephemeral=True)
        def check(m):
            return m.author == interaction.user and m.channel == interaction.channel and len(m.mentions) == 1
        try:
            msg = await bot.wait_for("message", check=check, timeout=30)
            opponent = msg.mentions[0]
            print(f"üîç Opponent tagged: {opponent.name}")
            if opponent.bot:
                await interaction.followup.send("Kh√¥ng th·ªÉ ch∆°i v·ªõi bot! Vui l√≤ng tag m·ªôt ng∆∞·ªùi ch∆°i kh√°c.", ephemeral=True)
                print("‚ùå Tagged a bot")
                return
            if opponent == interaction.user:
                await interaction.followup.send("Kh√¥ng th·ªÉ ch∆°i v·ªõi ch√≠nh m√¨nh! Vui l√≤ng tag ng∆∞·ªùi kh√°c.", ephemeral=True)
                print("‚ùå Tagged self")
                return

            size = selected_board_size.get(interaction.user.id, 5)
            print(f"üîç Board size for play_human: {size}x{size}")

            guild = interaction.guild
            overwrites = {
                guild.default_role: discord.PermissionOverwrite(view_channel=False),
                interaction.user: discord.PermissionOverwrite(view_channel=True, send_messages=True),
                opponent: discord.PermissionOverwrite(view_channel=True, send_messages=True),
                guild.me: discord.PermissionOverwrite(view_channel=True, send_messages=True)
            }
            try:
                channel = await guild.create_text_channel(f"caro-{interaction.user.name}-vs-{opponent.name}", overwrites=overwrites)
                print(f"‚úÖ Created channel for play_human: {channel.name}")
            except Exception as e:
                await interaction.followup.send(f"‚ùå L·ªói khi t·∫°o k√™nh caro: {e}", ephemeral=True)
                print(f"‚ùå Error creating channel for play_human: {e}")
                return

            game = CaroGame(interaction.user, opponent, size=size)
            games[channel.id] = game
            game.create_board()

            embed = discord.Embed(title=f"C·ªù Caro {size}x{size}", description=f"L∆∞·ª£t c·ªßa {interaction.user.mention}\nT·ªça ƒë·ªô: A1 = (0,0), B2 = (1,1), ...", color=discord.Color.blue())
            view = discord.ui.View()
            component_count = 0
            for row in game.buttons:
                for button in row:
                    if component_count < 23:
                        view.add_item(button)
                        component_count += 1
                    else:
                        print(f"‚ùå Skipped adding button: Maximum components reached")

            control_view = discord.ui.View()
            close_button = discord.ui.Button(label="ƒê√≥ng Ticket", style=discord.ButtonStyle.danger, custom_id=f"close_caro_{channel.id}", disabled=True)
            replay_button = discord.ui.Button(label="Ch∆°i l·∫°i", style=discord.ButtonStyle.primary, custom_id=f"replay_{channel.id}", disabled=True)
            control_view.add_item(replay_button)
            control_view.add_item(close_button)

            try:
                board_message = await channel.send(embed=embed, view=view)
                board_messages[channel.id] = board_message.id
                control_message = await channel.send(view=control_view)
                control_messages[channel.id] = control_message.id
                print(f"‚úÖ Sent caro board (message_id: {board_message.id}) and controls (message_id: {control_message.id}) to channel: {channel.name}")
            except Exception as e:
                await interaction.followup.send(f"‚ùå L·ªói khi g·ª≠i b·∫£ng caro: {e}", ephemeral=True)
                print(f"‚ùå Error sending caro board: {e}")
                return

            await interaction.followup.send(f"Ticket ƒë√£ ƒë∆∞·ª£c t·∫°o t·∫°i {channel.mention}", ephemeral=True)

            while channel.id in games:
                if asyncio.get_event_loop().time() - games[channel.id].last_move_time > 30:
                    try:
                        await channel.send(f"{games[channel.id].current_player.mention} kh√¥ng thao t√°c trong 30 gi√¢y. Tr√≤ ch∆°i k·∫øt th√∫c!")
                        if channel.id in control_messages:
                            try:
                                control_message = await channel.fetch_message(control_messages[channel.id])
                                control_view = discord.ui.View()
                                close_button = discord.ui.Button(label="ƒê√≥ng Ticket", style=discord.ButtonStyle.danger, custom_id=f"close_caro_{channel.id}", disabled=False)
                                replay_button = discord.ui.Button(label="Ch∆°i l·∫°i", style=discord.ButtonStyle.primary, custom_id=f"replay_{channel.id}", disabled=False)
                                control_view.add_item(replay_button)
                                control_view.add_item(close_button)
                                await control_message.edit(view=control_view)
                                print(f"‚úÖ Enabled control buttons after timeout in channel: {channel.name}")
                            except:
                                print(f"‚ùå Error enabling control buttons after timeout")
                        await channel.delete()
                        if channel.id in games:
                            del games[channel.id]
                        if channel.id in board_messages:
                            del board_messages[channel.id]
                        if channel.id in control_messages:
                            del control_messages[channel.id]
                    except:
                        pass
                    break
                await asyncio.sleep(5)

        except asyncio.TimeoutError:
            await interaction.followup.send("H·∫øt th·ªùi gian ch·ªù! Vui l√≤ng th·ª≠ l·∫°i.", ephemeral=True)
            print("‚ùå Timeout waiting for opponent tag")

    # X·ª≠ l√Ω nh·∫•n √¥ tr√™n b·∫£ng caro
    elif custom_id.startswith("caro_"):
        channel_id = interaction.channel_id
        if channel_id not in games:
            await interaction.response.send_message("Tr√≤ ch∆°i kh√¥ng t·ªìn t·∫°i!", ephemeral=True)
            print("‚ùå Game not found")
            return

        game = games[channel_id]
        if interaction.user != game.current_player and not (game.is_bot and interaction.user == game.player1):
            await interaction.response.send_message("Kh√¥ng ph·∫£i l∆∞·ª£t c·ªßa b·∫°n!", ephemeral=True)
            print(f"‚ùå Not your turn: {interaction.user.name}")
            return

        game.last_move_time = asyncio.get_event_loop().time()

        try:
            _, row, col = custom_id.split("_")
            row, col = int(row), int(col)
        except:
            await interaction.response.send_message("‚ùå L·ªói khi x·ª≠ l√Ω n∆∞·ªõc ƒëi!", ephemeral=True)
            print("‚ùå Error parsing caro move")
            return

        game.board[row][col] = game.symbols[game.current_player]

        winner = game.check_winner(game.symbols[game.current_player])
        game.create_board()

        embed = discord.Embed(title=f"C·ªù Caro {game.size}x{game.size}", description=f"L∆∞·ª£t c·ªßa {game.current_player.mention}\nT·ªça ƒë·ªô: A1 = (0,0), B2 = (1,1), ...", color=discord.Color.blue())
        view = discord.ui.View()
        component_count = 0
        for row in game.buttons:
            for button in row:
                if component_count < 23:
                    view.add_item(button)
                    component_count += 1
                else:
                    print(f"‚ùå Skipped adding button: Maximum components reached")

        try:
            if winner == True:
                embed = discord.Embed(title=f"C·ªù Caro {game.size}x{game.size}", description=f"{interaction.user.mention} th·∫Øng!\nT·ªça ƒë·ªô: A1 = (0,0), B2 = (1,1), ...", color=discord.Color.green())
                await interaction.response.edit_message(embed=embed, view=view)
                if channel_id in control_messages:
                    try:
                        control_message = await interaction.channel.fetch_message(control_messages[channel_id])
                        control_view = discord.ui.View()
                        close_button = discord.ui.Button(label="ƒê√≥ng Ticket", style=discord.ButtonStyle.danger, custom_id=f"close_caro_{channel_id}", disabled=False)
                        replay_button = discord.ui.Button(label="Ch∆°i l·∫°i", style=discord.ButtonStyle.primary, custom_id=f"replay_{channel_id}", disabled=False)
                        control_view.add_item(replay_button)
                        control_view.add_item(close_button)
                        await control_message.edit(view=control_view)
                        print(f"‚úÖ Enabled control buttons after win in channel: {interaction.channel.name}")
                    except:
                        print(f"‚ùå Error enabling control buttons")
                print(f"‚úÖ Game ended: {interaction.user.name} wins")
                return
            elif winner == "draw":
                embed = discord.Embed(title=f"C·ªù Caro {game.size}x{game.size}", description="H√≤a!\nT·ªça ƒë·ªô: A1 = (0,0), B2 = (1,1), ...", color=discord.Color.yellow())
                await interaction.response.edit_message(embed=embed, view=view)
                if channel_id in control_messages:
                    try:
                        control_message = await interaction.channel.fetch_message(control_messages[channel_id])
                        control_view = discord.ui.View()
                        close_button = discord.ui.Button(label="ƒê√≥ng Ticket", style=discord.ButtonStyle.danger, custom_id=f"close_caro_{channel_id}", disabled=False)
                        replay_button = discord.ui.Button(label="Ch∆°i l·∫°i", style=discord.ButtonStyle.primary, custom_id=f"replay_{channel_id}", disabled=False)
                        control_view.add_item(replay_button)
                        control_view.add_item(close_button)
                        await control_message.edit(view=control_view)
                        print(f"‚úÖ Enabled control buttons after draw in channel: {interaction.channel.name}")
                    except:
                        print(f"‚ùå Error enabling control buttons")
                print("‚úÖ Game ended: Draw")
                return

            if game.is_bot:
                game.current_player = game.player2
                bot_move = game.bot_move()
                if bot_move:
                    row, col = bot_move
                    game.board[row][col] = game.symbols[game.player2]
                    game.last_move_time = asyncio.get_event_loop().time()
                    winner = game.check_winner(game.symbols[game.player2])
                    game.create_board()

                    view = discord.ui.View()
                    component_count = 0
                    for row in game.buttons:
                        for button in row:
                            if component_count < 23:
                                view.add_item(button)
                                component_count += 1
                            else:
                                print(f"‚ùå Skipped adding button: Maximum components reached")

                    if winner == True:
                        embed = discord.Embed(title=f"C·ªù Caro {game.size}x{game.size}", description="Bot th·∫Øng!\nT·ªça ƒë·ªô: A1 = (0,0), B2 = (1,1), ...", color=discord.Color.red())
                        await interaction.response.edit_message(embed=embed, view=view)
                        if channel_id in control_messages:
                            try:
                                control_message = await interaction.channel.fetch_message(control_messages[channel_id])
                                control_view = discord.ui.View()
                                close_button = discord.ui.Button(label="ƒê√≥ng Ticket", style=discord.ButtonStyle.danger, custom_id=f"close_caro_{channel_id}", disabled=False)
                                replay_button = discord.ui.Button(label="Ch∆°i l·∫°i", style=discord.ButtonStyle.primary, custom_id=f"replay_{channel_id}", disabled=False)
                                control_view.add_item(replay_button)
                                control_view.add_item(close_button)
                                await control_message.edit(view=control_view)
                                print(f"‚úÖ Enabled control buttons after bot win in channel: {interaction.channel.name}")
                            except:
                                print(f"‚ùå Error enabling control buttons")
                        print("‚úÖ Game ended: Bot wins")
                        return
                    elif winner == "draw":
                        embed = discord.Embed(title=f"C·ªù Caro {game.size}x{game.size}", description="H√≤a!\nT·ªça ƒë·ªô: A1 = (0,0), B2 = (1,1), ...", color=discord.Color.yellow())
                        await interaction.response.edit_message(embed=embed, view=view)
                        if channel_id in control_messages:
                            try:
                                control_message = await interaction.channel.fetch_message(control_messages[channel_id])
                                control_view = discord.ui.View()
                                close_button = discord.ui.Button(label="ƒê√≥ng Ticket", style=discord.ButtonStyle.danger, custom_id=f"close_caro_{channel_id}", disabled=False)
                                replay_button = discord.ui.Button(label="Ch∆°i l·∫°i", style=discord.ButtonStyle.primary, custom_id=f"replay_{channel_id}", disabled=False)
                                control_view.add_item(replay_button)
                                control_view.add_item(close_button)
                                await control_message.edit(view=control_view)
                                print(f"‚úÖ Enabled control buttons after draw in channel: {interaction.channel.name}")
                            except:
                                print(f"‚ùå Error enabling control buttons")
                        print("‚úÖ Game ended: Draw")
                        return

                    game.current_player = game.player1
                    embed = discord.Embed(title=f"C·ªù Caro {game.size}x{game.size}", description=f"L∆∞·ª£t c·ªßa {game.player1.mention}\nT·ªça ƒë·ªô: A1 = (0,0), B2 = (1,1), ...", color=discord.Color.blue())
                    await interaction.response.edit_message(embed=embed, view=view)
                    print(f"‚úÖ Bot moved, now {game.player1.name}'s turn")
            else:
                game.current_player = game.player2 if game.current_player == game.player1 else game.player1
                embed = discord.Embed(title=f"C·ªù Caro {game.size}x{game.size}", description=f"L∆∞·ª£t c·ªßa {game.current_player.mention}\nT·ªça ƒë·ªô: A1 = (0,0), B2 = (1,1), ...", color=discord.Color.blue())
                await interaction.response.edit_message(embed=embed, view=view)
                print(f"‚úÖ Now {game.current_player.name}'s turn")
        except Exception as e:
            await interaction.response.send_message(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t b·∫£ng caro: {e}", ephemeral=True)
            print(f"‚ùå Error updating caro board: {e}")

    # X·ª≠ l√Ω n√∫t Ch∆°i l·∫°i
    elif custom_id.startswith("replay_"):
        channel_id = int(custom_id.split("_")[1])
        if channel_id not in games:
            await interaction.response.send_message("Tr√≤ ch∆°i kh√¥ng t·ªìn t·∫°i!", ephemeral=True)
            print("‚ùå Replay: Game not found")
            return

        game = games[channel_id]
        game.reset_board()
        embed = discord.Embed(title=f"C·ªù Caro {game.size}x{game.size}", description=f"L∆∞·ª£t c·ªßa {game.current_player.mention}\nT·ªça ƒë·ªô: A1 = (0,0), B2 = (1,1), ...", color=discord.Color.blue())
        view = discord.ui.View()
        component_count = 0
        for row in game.buttons:
            for button in row:
                if component_count < 23:
                    view.add_item(button)
                    component_count += 1
                else:
                    print(f"‚ùå Skipped adding button: Maximum components reached")

        try:
            if channel_id in board_messages:
                board_message = await interaction.channel.fetch_message(board_messages[channel_id])
                await board_message.edit(embed=embed, view=view)
                print(f"‚úÖ Renewed board message (message_id: {board_messages[channel_id]}) in channel: {interaction.channel.name}")
            else:
                board_message = await interaction.channel.send(embed=embed, view=view)
                board_messages[channel_id] = board_message.id
                print(f"‚úÖ Sent new board message (message_id: {board_message.id}) in channel: {interaction.channel.name}")

            if channel_id in control_messages:
                try:
                    control_message = await interaction.channel.fetch_message(control_messages[channel_id])
                    control_view = discord.ui.View()
                    close_button = discord.ui.Button(label="ƒê√≥ng Ticket", style=discord.ButtonStyle.danger, custom_id=f"close_caro_{channel_id}", disabled=True)
                    replay_button = discord.ui.Button(label="Ch∆°i l·∫°i", style=discord.ButtonStyle.primary, custom_id=f"replay_{channel_id}", disabled=True)
                    control_view.add_item(replay_button)
                    control_view.add_item(close_button)
                    await control_message.edit(view=control_view)
                    print(f"‚úÖ Updated control message (message_id: {control_messages[channel_id]}) in channel: {interaction.channel.name}")
                except:
                    control_message = await interaction.channel.send(view=control_view)
                    control_messages[channel_id] = control_message.id
                    print(f"‚úÖ Sent new control message (message_id: {control_message.id}) in channel: {interaction.channel.name}")
            await interaction.response.defer()
            print(f"‚úÖ Game replayed in channel: {interaction.channel.name}")
        except Exception as e:
            await interaction.response.send_message(f"‚ùå L·ªói khi reset b·∫£ng caro: {e}", ephemeral=True)
            print(f"‚ùå Error replaying game: {e}")

    # X·ª≠ l√Ω n√∫t ƒê√≥ng Ticket
    elif custom_id.startswith("close_caro_"):
        channel_id = int(custom_id.split("_")[2])
        if channel_id in games:
            del games[channel_id]
        if channel_id in board_messages:
            del board_messages[channel_id]
        if channel_id in control_messages:
            del control_messages[channel_id]
        try:
            await interaction.channel.delete()
            await interaction.response.send_message("Ticket ƒë√£ ƒë∆∞·ª£c ƒë√≥ng!", ephemeral=True)
            print(f"‚úÖ Closed channel: {interaction.channel.name}")
        except:
            print("‚ùå Error closing channel")

# -------------------------
# Run Bot
# -------------------------
keep_alive()

if not DISCORD_TOKEN:
    print("‚ùå Ch∆∞a ƒë·∫∑t DISCORD_TOKEN")
else:
    bot.run(DISCORD_TOKEN)
