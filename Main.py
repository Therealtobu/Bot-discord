import os
import discord
from discord.ext import commands
import asyncio
import random
from datetime import datetime, timedelta
from keep_alive import keep_alive

# -------------------------
# C·∫•u h√¨nh bot
# -------------------------
DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")

# Verify Config
ROLE_ID = 1400724722714542111
VERIFY_CHANNEL_ID = 1400732340677771356

# Ticket Config
GUILD_ID = 1372215595218505891
TICKET_CHANNEL_ID = 1400750812912685056
SUPPORTERS = ["__tobu", "caycotbietmua"]

# Anti-Spam & Filter Config
SPAM_LIMIT = 5
TIME_WINDOW = 30
MUTE_TIME = 60
user_messages = {}
user_offenses = {}  # L∆∞u s·ªë l·∫ßn vi ph·∫°m ƒë·ªÉ ban theo m·ªëc

# Danh s√°ch link b·ªã mute (blocklist)
BLOCK_LINKS = [
    "discord.gg", "facebook.com"
    "roblox.com/games", "shorturl.at"
]

# T·ª´ c·∫•m
BAD_WORDS = ["ƒëm", "ƒë·ªãt", "l·ªìn", "bu·ªìi", "c·∫∑c", "m·∫π m√†y", "fuck", "bitch", "dm", "cc"]

# Log Channel ID
LOG_CHANNEL_ID = 1402205862985994361

# Intents
intents = discord.Intents.default()
intents.members = True
intents.presences = True
intents.message_content = True

bot = commands.Bot(command_prefix="/", intents=intents)

# -------------------------
# Verify Button
# -------------------------
class VerifyButton(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="‚úÖ Verify / X√°c Th·ª±c", style=discord.ButtonStyle.green)
    async def verify_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        role = interaction.guild.get_role(ROLE_ID)
        member = interaction.user

        if role in member.roles:
            await interaction.response.send_message("‚úÖ B·∫°n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c tr∆∞·ªõc ƒë√≥!", ephemeral=True)
        else:
            await member.add_roles(role)
            await interaction.response.send_message("üéâ B·∫°n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c th√†nh c√¥ng!", ephemeral=True)

# -------------------------
# Ticket Buttons
# -------------------------
class CloseTicketView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="üîí Close Ticket", style=discord.ButtonStyle.red)
    async def close(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_message("üîí Ticket s·∫Ω b·ªã ƒë√≥ng trong 3 gi√¢y...", ephemeral=True)
        await interaction.channel.delete()

class CreateTicketView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="üì© T·∫°o Ticket", style=discord.ButtonStyle.green)
    async def create_ticket(self, interaction: discord.Interaction, button: discord.ui.Button):
        guild = bot.get_guild(GUILD_ID)
        supporters_online = []

        for member in guild.members:
            if member.name in SUPPORTERS and member.status != discord.Status.offline:
                supporters_online.append(member)

        if not supporters_online:
            await interaction.response.send_message("‚ùå Hi·ªán kh√¥ng c√≥ supporter n√†o online, vui l√≤ng th·ª≠ l·∫°i sau.", ephemeral=True)
            return

        supporter = random.choice(supporters_online)
        await interaction.response.send_message(
            f"‚úÖ **{supporter.display_name}** ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t ƒë·ªÉ h·ªó tr·ª£ cho b·∫°n, vui l√≤ng ki·ªÉm tra ticket m·ªõi!",
            ephemeral=True
        )

        overwrites = {
            guild.default_role: discord.PermissionOverwrite(view_channel=False),
            interaction.user: discord.PermissionOverwrite(view_channel=True, send_messages=True),
            supporter: discord.PermissionOverwrite(view_channel=True, send_messages=True),
            guild.me: discord.PermissionOverwrite(view_channel=True, send_messages=True)
        }
        ticket_channel = await guild.create_text_channel(
            f"ticket-{interaction.user.name}",
            overwrites=overwrites
        )

        embed = discord.Embed(
            title="üé´ Ticket H·ªó Tr·ª£",
            description=f"{supporter.mention} s·∫Ω s·ªõm h·ªó tr·ª£ b·∫°n.\nVui l√≤ng n√≥i v·∫•n ƒë·ªÅ b·∫°n c·∫ßn h·ªó tr·ª£.",
            color=discord.Color.blue()
        )
        await ticket_channel.send(content=interaction.user.mention, embed=embed, view=CloseTicketView())

# -------------------------
# On Ready
# -------------------------
@bot.event
async def on_ready():
    print(f"‚úÖ Bot ƒë√£ ƒëƒÉng nh·∫≠p: {bot.user}")

    verify_channel = bot.get_channel(VERIFY_CHANNEL_ID)
    if verify_channel:
        embed = discord.Embed(
            title="X√°c Th·ª±c Th√†nh Vi√™n",
            description="B·∫•m n√∫t **Verify/X√°c Th·ª±c** ·ªü d∆∞·ªõi ƒë·ªÉ c√≥ th·ªÉ t∆∞∆°ng t√°c trong nh√≥m\n‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è",
            color=discord.Color.green()
        )
        await verify_channel.send(embed=embed, view=VerifyButton())

    ticket_channel = bot.get_channel(TICKET_CHANNEL_ID)
    if ticket_channel:
        embed = discord.Embed(
            title="üì¢ H·ªó Tr·ª£",
            description=(
                "N·∫øu b·∫°n c·∫ßn **H·ªó Tr·ª£** h√£y b·∫•m n√∫t **T·∫°o Ticket** ·ªü d∆∞·ªõi\n"
                "---------------------\n"
                "L∆ØU √ù: V√¨ c√°c Mod kh√° b·∫≠n n√™n vi·ªác Support v·∫•n ƒë·ªÅ s·∫Ω kh√° l√¢u v√† **Tuy·ªát ƒë·ªëi kh√¥ng ƒë∆∞·ª£c spam nhi·ªÅu ticket**.\n"
                "Khi t·∫°o ticket th√¨ **n√≥i th·∫≥ng v·∫•n ƒë·ªÅ lu√¥n**.\n"
                "N·∫øu kh√¥ng tu√¢n th·ªß c√°c lu·∫≠t tr√™n s·∫Ω b·ªã **mute 1 ng√†y**."
            ),
            color=discord.Color.orange()
        )
        await ticket_channel.send(embed=embed, view=CreateTicketView())

# -------------------------
# X·ª≠ l√Ω mute/ban & log
# -------------------------
async def punish_and_log(message, reason="vi ph·∫°m"):
    try:
        guild = message.guild

        # X√≥a t·∫•t c·∫£ tin nh·∫Øn g·∫ßn ƒë√¢y c·ªßa ng∆∞·ªùi vi ph·∫°m trong TIME_WINDOW gi√¢y
        async for msg in message.channel.history(limit=100):
            if msg.author == message.author and (datetime.utcnow() - msg.created_at).seconds <= TIME_WINDOW:
                try:
                    await msg.delete()
                except:
                    pass

        # ƒê·∫øm s·ªë l·∫ßn vi ph·∫°m
        user_id = message.author.id
        user_offenses[user_id] = user_offenses.get(user_id, 0) + 1
        offense_count = user_offenses[user_id]

        # M·ªëc ban
        ban_durations = {1: 600, 2: 1800, 3: 3600, 4: 86400}  # gi√¢y
        ban_time = ban_durations.get(offense_count, 86400)  # m·∫∑c ƒë·ªãnh 24h

        # Ban user
        await guild.ban(message.author, reason=f"{reason} - L·∫ßn {offense_count}")
        await message.channel.send(
            f"‚õî {message.author.mention} ƒë√£ b·ªã **ban {ban_time // 60} ph√∫t** (L·∫ßn {offense_count}) v√¨ {reason}!"
        )

        # Log vi ph·∫°m
        log_channel = bot.get_channel(LOG_CHANNEL_ID)
        if log_channel:
            embed = discord.Embed(
                title="üö® Ph√°t hi·ªán vi ph·∫°m",
                description=f"**Ng∆∞·ªùi vi ph·∫°m:** {message.author} ({message.author.mention})\n"
                            f"**L√Ω do:** {reason}\n**L·∫ßn vi ph·∫°m:** {offense_count}\n"
                            f"**Th·ªùi gian ban:** {ban_time // 60} ph√∫t",
                color=discord.Color.red()
            )
            embed.add_field(name="N·ªôi dung tin nh·∫Øn", value=message.content or "*Kh√¥ng c√≥ n·ªôi dung*", inline=False)
            embed.add_field(name="K√™nh", value=message.channel.mention, inline=True)
            embed.timestamp = datetime.utcnow()
            await log_channel.send(embed=embed)

        # T·ª± g·ª° ban sau th·ªùi gian quy ƒë·ªãnh
        await asyncio.sleep(ban_time)
        try:
            await guild.unban(discord.Object(id=user_id))
        except:
            pass

    except Exception as e:
        print(f"L·ªói punish/log: {e}")

# -------------------------
# On Message (AntiSpam + Filter + Trigger)
# -------------------------
@bot.event
async def on_message(message):
    if message.author.bot:
        return

    content_lower = message.content.lower()

    # 1. T·ª´ c·∫•m
    if any(bad_word in content_lower for bad_word in BAD_WORDS):
        await punish_and_log(message, "g·ª≠i t·ª´ ng·ªØ c·∫•m")
        return

    # 2. Link b·ªã c·∫•m
    if any(block in content_lower for block in BLOCK_LINKS):
        await punish_and_log(message, "g·ª≠i link b·ªã c·∫•m")
        return

    # 3. Spam
    now = datetime.now()
    user_id = message.author.id
    if user_id not in user_messages:
        user_messages[user_id] = []
    user_messages[user_id].append(now)
    user_messages[user_id] = [t for t in user_messages[user_id] if now - t < timedelta(seconds=TIME_WINDOW)]

    if len(user_messages[user_id]) > SPAM_LIMIT:
        await punish_and_log(message, "spam tin nh·∫Øn")
        user_messages[user_id] = []
        return


# -------------------------
# Run Bot
# -------------------------
keep_alive()

if not DISCORD_TOKEN:
    print("‚ùå L·ªói: Ch∆∞a ƒë·∫∑t DISCORD_TOKEN trong Environment Variables c·ªßa Render")
else:
    bot.run(DISCORD_TOKEN)
