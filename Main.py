import os
import discord
from discord.ext import commands, tasks
import asyncio
from datetime import datetime, timedelta, timezone
from keep_alive import keep_alive
import random
import json
import re
import smtplib
from email.mime.text import MIMEText
import sqlite3

# -------------------------
# C·∫•u h√¨nh bot
# -------------------------
DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")
FILE_PATH = "data.json"

# Verify Config
ROLE1_ID = 1400724722714542111  # Verify B·∫≠c 1
ROLE2_ID = 1409758314048520245  # Verify B·∫≠c 2 - B·ªî SUNG ID TH·ª∞C T·∫æ
VERIFY_CHANNEL_ID = 1400732340677771356  # K√™nh verify b·∫≠c 1
VERIFY2_CHANNEL_ID = 1409758117398581320  # K√™nh verify b·∫≠c 2 - B·ªî SUNG ID TH·ª∞C T·∫æ
SENDER_EMAIL = 'botbotbot201303@gmail.com'  # B·ªî SUNG EMAIL
SENDER_PASSWORD = 'awmt ndvb wlem iaap'  # B·ªî SUNG APP PASSWORD

# Ticket Config
GUILD_ID = 1372215595218505891
TICKET_CHANNEL_ID = 1400750812912685056
SUPPORTERS = ["__tobu", "caycotbietmua"]

# Anti-Spam & Filter Config
SPAM_LIMIT = 5
TIME_WINDOW = 30  # gi√¢y
MUTE_TIME_BADWORD = 900  # 15 ph√∫t
MUTE_TIME_LINK = 86400  # 1 ng√†y
MUTE_ROLE_ID = 1402205863510282240
LOG_CHANNEL_ID = 1402205862985994361

# Voice Channel Hi·ªÉn Th·ªã Th√†nh Vi√™n
MEMBER_COUNT_CHANNEL_ID = 1402556153275093024

# Log Join/Leave
JOIN_CHANNEL_ID = 1402563416219975791
LEAVE_CHANNEL_ID = 1402564378569736272

# Caro Config
CARO_CHANNEL_ID = 1402622963823546369
BOARD_SIZES = {"3x3": 3, "5x5": 5}
games = {}
board_messages = {}
control_messages = {}
selected_board_size = {}

# Link b·ªã c·∫•m
BLOCK_LINKS = ["hentai", "porn", "xhamster", "sex"]

# T·ª´ c·∫•m
BAD_WORDS = ["ƒëm", "ƒë·ªãt", "l·ªìn", "bu·ªìi", "c·∫∑c", "m·∫π m√†y", "fuck", "bitch", "dm", "cc"]

# T·ª´ ƒë√°ng ng·ªù cho th√†nh vi√™n m·ªõi (d∆∞·ªõi 1 ng√†y)
SUSPICIOUS_WORDS = ["xin hack roblox", "xin krnl", "xin delta x", "hack roblox", "krnl", "delta x"]

# Setup database cho email unique
conn = sqlite3.connect('emails.db')
cur = conn.cursor()
cur.execute('''CREATE TABLE IF NOT EXISTS emails (email TEXT UNIQUE, user_id INTEGER)''')
conn.commit()

# Dict ƒë·ªÉ l∆∞u th·ªùi gian nh·∫Øn tin cu·ªëi c√πng cho verify b·∫≠c 1
last_messages = {}

# Kh·ªüi t·∫°o d·ªØ li·ªáu t·ª´ file c·ª•c b·ªô
data = {}
try:
    with open(FILE_PATH, 'r') as f:
        loaded = json.load(f)
        data = {
            k: {
                'last_daily': datetime.fromisoformat(v['last_daily']) if v['last_daily'] else None,
            } for k, v in loaded.items()
        }
except FileNotFoundError:
    print(f"‚ùå Kh√¥ng t√¨m th·∫•y {FILE_PATH}, t·∫°o file m·ªõi")
    with open(FILE_PATH, 'w') as f:
        json.dump(data, f, indent=2)
except Exception as e:
    print(f"‚ùå L·ªói khi ƒë·ªçc {FILE_PATH}: {e}")

def save_data():
    try:
        with open(FILE_PATH, 'w') as f:
            content = {
                k: {
                    'last_daily': v['last_daily'].isoformat() if v['last_daily'] else None,
                } for k, v in data.items()
            }
            json.dump(content, f, indent=2)
        print(f"‚úÖ ƒê√£ l∆∞u d·ªØ li·ªáu v√†o {FILE_PATH}")
    except Exception as e:
        print(f"‚ùå L·ªói khi l∆∞u {FILE_PATH}: {e}")

# Intents
intents = discord.Intents.default()
intents.members = True
intents.presences = True
intents.message_content = True

bot = commands.Bot(command_prefix="/", intents=intents)

# -------------------------
# Caro Game Class
# -------------------------
class CaroGame:
    def __init__(self, player1, player2=None, is_bot=False, size=5):
        self.size = size
        self.board = [[" " for _ in range(size)] for _ in range(size)]
        self.player1 = player1
        self.player2 = player2
        self.is_bot = is_bot
        self.current_player = player1
        self.symbols = {player1: "X", player2: "O" if player2 else "O"}
        self.buttons = []
        self.last_move_time = asyncio.get_event_loop().time()

    def create_board(self):
        self.buttons = []
        for i in range(self.size):
            row = []
            for j in range(self.size):
                label = "‚¨ú" if self.board[i][j] == " " else ("‚ùå" if self.board[i][j] == "X" else "‚≠ï")
                style = discord.ButtonStyle.secondary if self.board[i][j] == " " else (
                    discord.ButtonStyle.success if self.board[i][j] == "X" else discord.ButtonStyle.danger
                )
                row.append(discord.ui.Button(label=label, style=style, custom_id=f"caro_{i}_{j}", disabled=self.board[i][j] != " ", row=i))
            self.buttons.append(row)

    def reset_board(self):
        self.board = [[" " for _ in range(self.size)] for _ in range(self.size)]
        self.current_player = self.player1
        self.last_move_time = asyncio.get_event_loop().time()
        self.create_board()

    def check_winner(self, symbol):
        for row in self.board:
            for i in range(self.size - 2):
                if row[i:i+3] == [symbol, symbol, symbol]:
                    return True
        for j in range(self.size):
            for i in range(self.size - 2):
                if [self.board[i+k][j] for k in range(3)] == [symbol, symbol, symbol]:
                    return True
        for i in range(self.size - 2):
            for j in range(self.size - 2):
                if [self.board[i+k][j+k] for k in range(3)] == [symbol, symbol, symbol]:
                    return True
        for i in range(self.size - 2):
            for j in range(2, self.size):
                if [self.board[i+k][j-k] for k in range(3)] == [symbol, symbol, symbol]:
                    return True
        if all(self.board[i][j] != " " for i in range(self.size) for j in range(self.size)):
            return "draw"
        return False

    def bot_move(self):
        empty_cells = [(i, j) for i in range(self.size) for j in range(self.size) if self.board[i][j] == " "]
        if empty_cells:
            return random.choice(empty_cells)
        return None

# -------------------------
# Verify Button cho b·∫≠c 1
# -------------------------
class VerifyButton(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="‚úÖ Verify / X√°c Th·ª±c B·∫≠c 1", style=discord.ButtonStyle.success)
    async def verify_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        role1 = interaction.guild.get_role(ROLE1_ID)
        member = interaction.user

        if role1 in member.roles:
            await interaction.response.send_message("‚úÖ B·∫°n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c b·∫≠c 1 tr∆∞·ªõc ƒë√≥!", ephemeral=True)
        else:
            await member.add_roles(role1)
            await interaction.response.send_message("üéâ B·∫°n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c b·∫≠c 1 th√†nh c√¥ng! V√†o k√™nh x√°c th·ª±c b·∫≠c 2 ƒë·ªÉ ti·∫øp t·ª•c.", ephemeral=True)

# -------------------------
# Verify Button cho b·∫≠c 2
# -------------------------
class Verify2Button(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="‚úÖ Verify / X√°c Th·ª±c B·∫≠c 2", style=discord.ButtonStyle.success)
    async def verify2_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.channel_id != VERIFY2_CHANNEL_ID:
            await interaction.response.send_message("N√∫t n√†y ch·ªâ ho·∫°t ƒë·ªông ·ªü k√™nh x√°c th·ª±c b·∫≠c 2.", ephemeral=True)
            return

        member = interaction.user
        role1 = interaction.guild.get_role(ROLE1_ID)
        role2 = interaction.guild.get_role(ROLE2_ID)

        if role2 in member.roles:
            await interaction.response.send_message("‚úÖ B·∫°n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c b·∫≠c 2 tr∆∞·ªõc ƒë√≥!", ephemeral=True)
            return

        if role1 not in member.roles:
            await interaction.response.send_message("B·∫°n c·∫ßn x√°c th·ª±c b·∫≠c 1 tr∆∞·ªõc khi x√°c th·ª±c b·∫≠c 2!", ephemeral=True)
            return

        await interaction.response.send_message("Ki·ªÉm tra tin nh·∫Øn ri√™ng (DM) ƒë·ªÉ ti·∫øp t·ª•c x√°c th·ª±c.", ephemeral=True)

        user = interaction.user
        await user.send("Vui l√≤ng g·ª≠i ƒë·ªãa ch·ªâ Gmail c·ªßa b·∫°n ƒë·ªÉ x√°c th·ª±c. (M·ªói Gmail ch·ªâ d√πng cho 1 t√†i kho·∫£n Discord)")

        def check(m):
            return m.author == user and isinstance(m.channel, discord.DMChannel)

        try:
            msg = await bot.wait_for('message', check=check, timeout=300)
            email = msg.content.strip().lower()

            # Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i
            cur = conn.cursor()
            cur.execute('SELECT * FROM emails WHERE email=?', (email,))
            if cur.fetchone():
                await user.send("Email n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng cho t√†i kho·∫£n kh√°c.")
                return

            # Generate code 4 ch·ªØ s·ªë
            code = random.randint(1000, 9999)
            str_code = str(code)

            # G·ª≠i email v·ªõi n·ªôi dung t√πy ch·ªânh
            email_content = f"""M√£ x√°c minh 2 b∆∞·ªõc: {code}

Xin ch√†o,

{code} l√† m√£ X√°c minh 2 b∆∞·ªõc Roblox cho {user.name}#{user.discriminator}.

H√£y nh·∫≠p m√£ tr√™n v√†o m√†n h√¨nh X√°c minh 2 b∆∞·ªõc ƒë·ªÉ ho√†n th√†nh qu√° tr√¨nh ƒëƒÉng nh·∫≠p. M√£ n√†y s·∫Ω h·∫øt h·∫°n sau 15 ph√∫t.

Y√™u c·∫ßu ƒëƒÉng nh·∫≠p n√†y ƒë∆∞·ª£c nh·∫≠n t·ª´ t√†i kho·∫£n Discord: {user.name}#{user.discriminator}

QUAN TR·ªåNG: Kh√¥ng chia s·∫ª m√£ b·∫£o m·∫≠t v·ªõi b·∫•t k·ª≥ ai. Roblox s·∫Ω kh√¥ng bao gi·ªù h·ªèi m√£ c·ªßa b·∫°n. Vi·ªác chia s·∫ª n√†y bao g·ªìm c√°c h√†nh ƒë·ªông nh∆∞ nh·∫Øn tin m√£ c·ªßa b·∫°n, chia s·∫ª m√†n h√¨nh, v.v. Khi chia s·∫ª m√£ b·∫£o m·∫≠t cho ng∆∞·ªùi kh√°c, b·∫°n ƒë·∫∑t t√†i kho·∫£n v√† n·ªôi dung trong t√†i kho·∫£n c·ªßa m√¨nh v√†o t√¨nh tr·∫°ng r·ªßi ro cao.

C·∫£m ∆°n,
ƒê·ªôi ng≈© Group HACK IOS V√Ä ANDROID"""
            email_msg = MIMEText(email_content)
            email_msg['Subject'] = 'M√£ X√°c Th·ª±c 2 B∆∞·ªõc'
            email_msg['From'] = SENDER_EMAIL
            email_msg['To'] = email

            try:
                with smtplib.SMTP_SSL('smtp.gmail.com', 465) as server:
                    server.login(SENDER_EMAIL, SENDER_PASSWORD)
                    server.sendmail(SENDER_EMAIL, email, email_msg.as_string())
                await user.send("ƒê√£ g·ª≠i m√£ x√°c th·ª±c ƒë·∫øn email c·ªßa b·∫°n. Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞ (bao g·ªìm c·∫£ m·ª•c Spam).")
            except smtplib.SMTPAuthenticationError as e:
                await user.send("L·ªói: Kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p v√†o Gmail. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n ƒë·ªÉ ki·ªÉm tra th√¥ng tin ƒëƒÉng nh·∫≠p.")
                print(f"‚ùå SMTP Authentication Error: {str(e)}")
                return
            except Exception as e:
                await user.send(f"L·ªói khi g·ª≠i email: {str(e)}. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá qu·∫£n tr·ªã vi√™n.")
                print(f"‚ùå General SMTP Error: {str(e)}")
                return

            # T·∫°o view b√†n ph√≠m s·ªë
            class KeypadView(discord.ui.View):
                def __init__(self, real_code, user):
                    super().__init__(timeout=300)
                    self.code_input = ""
                    self.real_code = real_code
                    self.user = user

                async def add_digit(self, digit, keypad_interaction):
                    if len(self.code_input) < 4:
                        self.code_input += digit
                        await keypad_interaction.response.edit_message(content=f"Nh·∫≠p m√£: {'*' * len(self.code_input)} (ƒë√£ nh·∫≠p {len(self.code_input)} ch·ªØ s·ªë)")

                @discord.ui.button(label="1", style=discord.ButtonStyle.secondary, row=0)
                async def one(self, button: discord.ui.Button, keypad_interaction: discord.Interaction):
                    await self.add_digit("1", keypad_interaction)

                @discord.ui.button(label="2", style=discord.ButtonStyle.secondary, row=0)
                async def two(self, button: discord.ui.Button, keypad_interaction: discord.Interaction):
                    await self.add_digit("2", keypad_interaction)

                @discord.ui.button(label="3", style=discord.ButtonStyle.secondary, row=0)
                async def three(self, button: discord.ui.Button, keypad_interaction: discord.Interaction):
                    await self.add_digit("3", keypad_interaction)

                @discord.ui.button(label="4", style=discord.ButtonStyle.secondary, row=1)
                async def four(self, button: discord.ui.Button, keypad_interaction: discord.Interaction):
                    await self.add_digit("4", keypad_interaction)

                @discord.ui.button(label="5", style=discord.ButtonStyle.secondary, row=1)
                async def five(self, button: discord.ui.Button, keypad_interaction: discord.Interaction):
                    await self.add_digit("5", keypad_interaction)

                @discord.ui.button(label="6", style=discord.ButtonStyle.secondary, row=1)
                async def six(self, button: discord.ui.Button, keypad_interaction: discord.Interaction):
                    await self.add_digit("6", keypad_interaction)

                @discord.ui.button(label="7", style=discord.ButtonStyle.secondary, row=2)
                async def seven(self, button: discord.ui.Button, keypad_interaction: discord.Interaction):
                    await self.add_digit("7", keypad_interaction)

                @discord.ui.button(label="8", style=discord.ButtonStyle.secondary, row=2)
                async def eight(self, button: discord.ui.Button, keypad_interaction: discord.Interaction):
                    await self.add_digit("8", keypad_interaction)

                @discord.ui.button(label="9", style=discord.ButtonStyle.secondary, row=2)
                async def nine(self, button: discord.ui.Button, keypad_interaction: discord.Interaction):
                    await self.add_digit("9", keypad_interaction)

                @discord.ui.button(label="0", style=discord.ButtonStyle.secondary, row=3)
                async def zero(self, button: discord.ui.Button, keypad_interaction: discord.Interaction):
                    await self.add_digit("0", keypad_interaction)

                @discord.ui.button(label="X√≥a", style=discord.ButtonStyle.danger, row=3)
                async def clear(self, button: discord.ui.Button, keypad_interaction: discord.Interaction):
                    self.code_input = ""
                    await keypad_interaction.response.edit_message(content="Nh·∫≠p m√£: (ƒë√£ x√≥a)")

                @discord.ui.button(label="X√°c th·ª±c", style=discord.ButtonStyle.success, row=3)
                async def verify_btn(self, button: discord.ui.Button, keypad_interaction: discord.Interaction):
                    if self.code_input == self.real_code:
                        role2 = keypad_interaction.guild.get_role(ROLE2_ID)
                        await self.user.add_roles(role2)
                        cur.execute('INSERT INTO emails VALUES (?, ?)', (email, self.user.id))
                        conn.commit()
                        await keypad_interaction.response.send_message("X√°c th·ª±c th√†nh c√¥ng! B·∫°n gi·ªù c√≥ role Verify B·∫≠c 2.", ephemeral=True)
                        self.stop()
                    else:
                        await keypad_interaction.response.send_message("M√£ sai. H√£y th·ª≠ l·∫°i.", ephemeral=True)

            # T·∫°o v√† g·ª≠i view
            keypad_view = KeypadView(str_code, user)
            initial_message = await user.send("Nh·∫≠p m√£: ", view=keypad_view)

        except asyncio.TimeoutError:
            await user.send("H·∫øt th·ªùi gian x√°c th·ª±c.")
        except Exception as e:
            await user.send(f"L·ªói: {str(e)}")

# -------------------------
# Ticket Buttons
# -------------------------
class CloseTicketView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="üîí Close Ticket", style=discord.ButtonStyle.danger)
    async def close(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_message("üîí Ticket s·∫Ω b·ªã ƒë√≥ng trong 3 gi√¢y...", ephemeral=True)
        await asyncio.sleep(3)
        await interaction.channel.delete()

class CreateTicketView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="üì© T·∫°o Ticket", style=discord.ButtonStyle.success)
    async def create_ticket(self, interaction: discord.Interaction, button: discord.ui.Button):
        guild = bot.get_guild(GUILD_ID)
        supporters_online = []

        for member in guild.members:
            if member.name in SUPPORTERS and member.status != discord.Status.offline:
                supporters_online.append(member)

        if not supporters_online:
            await interaction.response.send_message("‚ùå Hi·ªán kh√¥ng c√≥ supporter n√†o online, vui l√≤ng th·ª≠ l·∫°i sau.", ephemeral=True)
            return

        supporter = random.choice(supporters_online)

        await interaction.response.send_message(
            f"‚úÖ **{supporter.display_name}** ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t ƒë·ªÉ h·ªó tr·ª£ cho b·∫°n, vui l√≤ng ki·ªÉm tra ticket m·ªõi!",
            ephemeral=True
        )

        overwrites = {
            guild.default_role: discord.PermissionOverwrite(view_channel=False),
            interaction.user: discord.PermissionOverwrite(view_channel=True, send_messages=True),
            supporter: discord.PermissionOverwrite(view_channel=True, send_messages=True),
            guild.me: discord.PermissionOverwrite(view_channel=True, send_messages=True)
        }
        ticket_channel = await guild.create_text_channel(
            f"ticket-{interaction.user.name}",
            overwrites=overwrites
        )

        embed = discord.Embed(
            title="üé´ Ticket H·ªó Tr·ª£",
            description=f"{supporter.mention} s·∫Ω s·ªõm h·ªó tr·ª£ b·∫°n.\nVui l√≤ng n√≥i v·∫•n ƒë·ªÅ b·∫°n c·∫ßn h·ªó tr·ª£.",
            color=discord.Color.blue()
        )
        await ticket_channel.send(content=interaction.user.mention, embed=embed, view=CloseTicketView())

# -------------------------
# On Ready
# -------------------------
@bot.event
async def on_ready():
    print(f"‚úÖ Bot ƒë√£ ƒëƒÉng nh·∫≠p: {bot.user}")
    print(f"Current directory: {os.getcwd()}")

    try:
        # Verify Embed cho b·∫≠c 1
        verify_channel = bot.get_channel(VERIFY_CHANNEL_ID)
        if verify_channel:
            print(f"‚úÖ T√¨m th·∫•y k√™nh verify b·∫≠c 1: {VERIFY_CHANNEL_ID}")
            async for msg in verify_channel.history(limit=50):
                if msg.author == bot.user:
                    try:
                        await msg.delete()
                        print(f"‚úÖ ƒê√£ x√≥a tin nh·∫Øn c≈© trong k√™nh verify b·∫≠c 1")
                    except Exception as e:
                        print(f"‚ùå L·ªói khi x√≥a tin nh·∫Øn c≈© trong verify b·∫≠c 1: {e}")
            embed = discord.Embed(
                title="X√°c Th·ª±c Th√†nh Vi√™n B·∫≠c 1",
                description="B·∫•m n√∫t **Verify/X√°c Th·ª±c B·∫≠c 1** ·ªü d∆∞·ªõi ƒë·ªÉ c√≥ th·ªÉ t∆∞∆°ng t√°c trong nh√≥m\n‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è",
                color=discord.Color.green()
            )
            await verify_channel.send(embed=embed, view=VerifyButton())
            print(f"‚úÖ ƒê√£ g·ª≠i embed verify b·∫≠c 1 ƒë·∫øn k√™nh {verify_channel.name}")
        else:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y k√™nh verify b·∫≠c 1: {VERIFY_CHANNEL_ID}")

        # Verify Embed cho b·∫≠c 2
        verify2_channel = bot.get_channel(VERIFY2_CHANNEL_ID)
        if verify2_channel:
            print(f"‚úÖ T√¨m th·∫•y k√™nh verify b·∫≠c 2: {VERIFY2_CHANNEL_ID}")
            async for msg in verify2_channel.history(limit=50):
                if msg.author == bot.user:
                    try:
                        await msg.delete()
                        print(f"‚úÖ ƒê√£ x√≥a tin nh·∫Øn c≈© trong k√™nh verify b·∫≠c 2")
                    except Exception as e:
                        print(f"‚ùå L·ªói khi x√≥a tin nh·∫Øn c≈© trong verify b·∫≠c 2: {e}")
            embed = discord.Embed(
                title="X√°c Th·ª±c B·∫≠c 2",
                description="B·∫•m n√∫t **Verify/X√°c Th·ª±c B·∫≠c 2** ·ªü d∆∞·ªõi ƒë·ªÉ x√°c th·ª±c qua email.\n"
                            "Y√™u c·∫ßu: Ph·∫£i c√≥ role **Verify B·∫≠c 1**.\n"
                            "L·ª£i √≠ch: Kh√¥ng gi·ªõi h·∫°n tin nh·∫Øn v√† ƒë∆∞·ª£c tham gia voice channel.",
                color=discord.Color.blue()
            )
            await verify2_channel.send(embed=embed, view=Verify2Button())
            print(f"‚úÖ ƒê√£ g·ª≠i embed verify b·∫≠c 2 ƒë·∫øn k√™nh {verify2_channel.name}")
        else:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y k√™nh verify b·∫≠c 2: {VERIFY2_CHANNEL_ID}")

        # Ticket Embed
        ticket_channel = bot.get_channel(TICKET_CHANNEL_ID)
        if ticket_channel:
            print(f"‚úÖ T√¨m th·∫•y k√™nh ticket: {TICKET_CHANNEL_ID}")
            async for msg in ticket_channel.history(limit=50):
                if msg.author == bot.user:
                    try:
                        await msg.delete()
                        print(f"‚úÖ ƒê√£ x√≥a tin nh·∫Øn c≈© trong k√™nh ticket")
                    except Exception as e:
                        print(f"‚ùå L·ªói khi x√≥a tin nh·∫Øn c≈© trong ticket: {e}")
            embed = discord.Embed(
                title="üì¢ H·ªó Tr·ª£",
                description="N·∫øu b·∫°n c·∫ßn **H·ªó Tr·ª£** h√£y b·∫•m n√∫t **T·∫°o Ticket** ·ªü d∆∞·ªõi\n"
                            "---------------------\n"
                            "L∆ØU √ù: V√¨ c√°c Mod kh√° b·∫≠n n√™n vi·ªác Support v·∫•n ƒë·ªÅ s·∫Ω kh√° l√¢u v√† **Tuy·ªát ƒë·ªëi kh√¥ng ƒë∆∞·ª£c spam nhi·ªÅu ticket**.\n"
                            "Khi t·∫°o ticket th√¨ **n√≥i th·∫≥ng v·∫•n ƒë·ªÅ lu√¥n**.\n"
                            "N·∫øu kh√¥ng tu√¢n th·ªß c√°c lu·∫≠t tr√™n s·∫Ω b·ªã **mute 1 ng√†y**.",
                color=discord.Color.orange()
            )
            await ticket_channel.send(embed=embed, view=CreateTicketView())
            print(f"‚úÖ ƒê√£ g·ª≠i embed ticket ƒë·∫øn k√™nh {ticket_channel.name}")
        else:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y k√™nh ticket: {TICKET_CHANNEL_ID}")

        # Caro Embed
        caro_channel = bot.get_channel(CARO_CHANNEL_ID)
        if caro_channel:
            print(f"‚úÖ T√¨m th·∫•y k√™nh caro: {CARO_CHANNEL_ID}")
            async for msg in caro_channel.history(limit=50):
                if msg.author == bot.user:
                    try:
                        await msg.delete()
                        print(f"‚úÖ ƒê√£ x√≥a tin nh·∫Øn c≈© trong k√™nh caro")
                    except Exception as e:
                        print(f"‚ùå L·ªói khi x√≥a tin nh·∫Øn c≈© trong caro: {e}")
            embed = discord.Embed(
                title="C·ªù Caro",
                description="Ch·ªçn ch·∫ø ƒë·ªô ch∆°i v√† k√≠ch th∆∞·ªõc b·∫£ng:",
                color=discord.Color.blue()
            )
            view = discord.ui.View()
            try:
                view.add_item(discord.ui.Button(label="Ch∆°i v·ªõi m√°y", style=discord.ButtonStyle.success, custom_id="play_bot"))
                view.add_item(discord.ui.Button(label="Ch∆°i v·ªõi ng∆∞·ªùi", style=discord.ButtonStyle.primary, custom_id="play_human"))
                select = discord.ui.Select(placeholder="Ch·ªçn k√≠ch th∆∞·ªõc b·∫£ng", options=[
                    discord.SelectOption(label="3x3", value="3x3"),
                    discord.SelectOption(label="5x5", value="5x5")
                ], custom_id="board_size")
                view.add_item(select)
                await caro_channel.send(embed=embed, view=view)
                print(f"‚úÖ ƒê√£ g·ª≠i embed caro ƒë·∫øn k√™nh: {caro_channel.name}")
            except Exception as e:
                print(f"‚ùå L·ªói khi g·ª≠i embed caro: {e}")
        else:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y k√™nh caro: {CARO_CHANNEL_ID}")

        # Kh·ªüi ƒë·ªông c·∫≠p nh·∫≠t s·ªë th√†nh vi√™n
        update_member_count.start()
        print("‚úÖ ƒê√£ kh·ªüi ƒë·ªông task update_member_count")

    except Exception as e:
        print(f"‚ùå L·ªói trong on_ready: {e}")

# -------------------------
# C·∫≠p nh·∫≠t s·ªë th√†nh vi√™n & online
# -------------------------
@tasks.loop(minutes=1)
async def update_member_count():
    guild = bot.get_guild(GUILD_ID)
    if not guild:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y guild: {GUILD_ID}")
        return

    total_members = len([m for m in guild.members if not m.bot and not m.system])
    online_members = len([m for m in guild.members if not m.bot and not m.system and m.status != discord.Status.offline])

    channel = guild.get_channel(MEMBER_COUNT_CHANNEL_ID)
    if channel:
        try:
            await channel.edit(name=f"üìä {total_members} th√†nh vi√™n | üü¢ {online_members} online")
            overwrite = discord.PermissionOverwrite(connect=False, view_channel=True, send_messages=False)
            await channel.set_permissions(guild.default_role, overwrite=overwrite)
            print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t k√™nh th√†nh vi√™n: {total_members} th√†nh vi√™n, {online_members} online")
        except Exception as e:
            print(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t s·ªë th√†nh vi√™n: {e}")

# -------------------------
# Th√¥ng b√°o khi c√≥ ng∆∞·ªùi v√†o / r·ªùi
# -------------------------
@bot.event
async def on_member_join(member):
    if member.bot or member.system:
        return
    channel = bot.get_channel(JOIN_CHANNEL_ID)
    if channel:
        try:
            embed = discord.Embed(
                title="üëã Ch√†o m·ª´ng th√†nh vi√™n m·ªõi!",
                description=f"Xin ch√†o {member.mention}, ch√∫c b·∫°n vui v·∫ª trong server!",
                color=discord.Color.green()
            )
            embed.set_thumbnail(url=member.avatar.url if member.avatar else member.default_avatar.url)
            embed.timestamp = datetime.now(timezone.utc)
            await channel.send(embed=embed)
            print(f"‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o member join: {member.name}")
        except Exception as e:
            print(f"‚ùå L·ªói khi g·ª≠i th√¥ng b√°o member join: {e}")

@bot.event
async def on_member_remove(member):
    if member.bot or member.system:
        return
    channel = bot.get_channel(LEAVE_CHANNEL_ID)
    if channel:
        try:
            embed = discord.Embed(
                title="üëã T·∫°m bi·ªát!",
                description=f"Th√†nh vi√™n **{member.name}** ƒë√£ r·ªùi kh·ªèi server.",
                color=discord.Color.red()
            )
            embed.set_thumbnail(url=member.avatar.url if member.avatar else member.default_avatar.url)
            embed.timestamp = datetime.now(timezone.utc)
            await channel.send(embed=embed)
            print(f"‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o member leave: {member.name}")
        except Exception as e:
            print(f"‚ùå L·ªói khi g·ª≠i th√¥ng b√°o member leave: {e}")

# -------------------------
# Mute + X√≥a tin nh·∫Øn + Log
# -------------------------
async def mute_and_log(message, reason="vi ph·∫°m", mute_time=900):
    try:
        mute_role = message.guild.get_role(MUTE_ROLE_ID)
        if not mute_role:
            print("‚ùå Kh√¥ng t√¨m th·∫•y role mute!")
            return

        async for msg in message.channel.history(limit=50):
            if msg.author == message.author and (datetime.now(timezone.utc) - msg.created_at).seconds <= TIME_WINDOW:
                try:
                    await msg.delete()
                    print(f"‚úÖ ƒê√£ x√≥a tin nh·∫Øn c·ªßa {message.author.name}")
                except Exception as e:
                    print(f"‚ùå L·ªói khi x√≥a tin nh·∫Øn: {e}")

        await message.author.add_roles(mute_role)
        print(f"‚úÖ ƒê√£ mute {message.author.name} trong {mute_time // 60} ph√∫t")

        log_channel = bot.get_channel(LOG_CHANNEL_ID)
        if log_channel:
            embed = discord.Embed(
                title="üö® Ph√°t hi·ªán vi ph·∫°m",
                description=f"**Ng∆∞·ªùi vi ph·∫°m:** {message.author.mention}\n**L√Ω do:** {reason}\n**Th·ªùi gian mute:** {mute_time // 60} ph√∫t",
                color=discord.Color.red()
            )
            embed.add_field(name="N·ªôi dung", value=f"||{message.content or '*Kh√¥ng c√≥ n·ªôi dung*'}||", inline=False)
            embed.add_field(name="K√™nh", value=message.channel.mention, inline=True)
            embed.add_field(name="L∆∞u √Ω", value="C√¢n nh·∫Øc khi xem", inline=False)
            embed.timestamp = datetime.now(timezone.utc)
            await log_channel.send(embed=embed)
            print(f"‚úÖ ƒê√£ g·ª≠i log vi ph·∫°m cho {message.author.name}")

        await asyncio.sleep(mute_time)
        await message.author.remove_roles(mute_role)
        print(f"‚úÖ ƒê√£ b·ªè mute {message.author.name}")

    except Exception as e:
        print(f"‚ùå L·ªói mute_and_log: {e}")

# -------------------------
# On Message (Filter + Anti-Spam + Verify Limit)
# -------------------------
user_messages = {}

@bot.event
async def on_message(message):
    if message.author.bot:
        return

    guild = message.guild
    member = guild.get_member(message.author.id)
    role1 = guild.get_role(ROLE1_ID)
    role2 = guild.get_role(ROLE2_ID)

    # X·ª≠ l√Ω gi·ªõi h·∫°n tin nh·∫Øn cho role b·∫≠c 1
    if role2 in member.roles:
        pass  # Kh√¥ng gi·ªõi h·∫°n
    elif role1 in member.roles:
        user_id = message.author.id
        now = datetime.now()

        if user_id in last_messages:
            delta = now - last_messages[user_id]
            if delta.total_seconds() < 60:
                await message.delete()
                await message.author.send("B·∫°n c·∫ßn x√°c th·ª±c m·ª©c 2 ƒë·ªÉ c√≥ th·ªÉ kh√¥ng gi·ªõi h·∫°n l∆∞·ª£t nh·∫Øn v√† tham gia v√†o nh√≥m tho·∫°i.")
                return

        last_messages[user_id] = now

    content_lower = message.content.lower()

    # Extract URLs and check bad words only in non-URL parts
    urls = re.findall(r'(https?://\S+)', message.content)
    non_url_content = re.sub(r'https?://\S+', '', content_lower)
    has_bad_word = any(bad_word in non_url_content for bad_word in BAD_WORDS)

    if has_bad_word:
        await mute_and_log(message, "d√πng t·ª´ ng·ªØ t·ª•c tƒ©u", MUTE_TIME_BADWORD)
        return

    if any(block in content_lower for block in BLOCK_LINKS):
        await mute_and_log(message, "g·ª≠i link b·ªã c·∫•m", MUTE_TIME_LINK)
        return

    now = datetime.now(timezone.utc)
    uid = message.author.id
    if uid not in user_messages:
        user_messages[uid] = []
    user_messages[uid].append(now)
    user_messages[uid] = [t for t in user_messages[uid] if now - t < timedelta(seconds=TIME_WINDOW)]

    if len(user_messages[uid]) > SPAM_LIMIT:
        await mute_and_log(message, "spam tin nh·∫Øn", MUTE_TIME_BADWORD)
        user_messages[uid] = []
        return

    # Ki·ªÉm tra th√†nh vi√™n m·ªõi g·ª≠i tin nh·∫Øn ƒë√°ng ng·ªù
    member = message.author
    if member.joined_at and (now - member.joined_at) < timedelta(days=1):
        has_suspicious_word = any(word in content_lower for word in SUSPICIOUS_WORDS)
        if has_suspicious_word:
            try:
                warning_message = await message.channel.send(
                    f"‚ö†Ô∏è **C·∫£nh b√°o**: Th√†nh vi√™n {member.mention} ch∆∞a ƒë·ªß 1 ng√†y trong server ƒë·ªÉ g·ª≠i c√°c n·ªôi dung nh∆∞ tr√™n. C√¢n nh·∫Øc khi g·ª≠i!"
                )
                await message.channel.set_permissions(
                    member,
                    overwrite=discord.PermissionOverwrite(view_channel=True, read_messages=False),
                    reason="T·∫°m ch·∫∑n xem tin nh·∫Øn c·∫£nh b√°o"
                )
                await asyncio.sleep(10)
                await message.channel.set_permissions(
                    member,
                    overwrite=None,
                    reason="Kh√¥i ph·ª•c quy·ªÅn m·∫∑c ƒë·ªãnh"
                )
                print(f"‚úÖ ƒê√£ g·ª≠i c·∫£nh b√°o th√†nh vi√™n m·ªõi trong k√™nh {message.channel.name} cho {member.name}")
            except Exception as e:
                print(f"‚ùå L·ªói khi g·ª≠i c·∫£nh b√°o th√†nh vi√™n m·ªõi: {e}")

    await bot.process_commands(message)

# -------------------------
# Caro Interaction Handler
# -------------------------
@bot.event
async def on_interaction(interaction: discord.Interaction):
    custom_id = interaction.data.get("custom_id")
    print(f"üîç Interaction received: {custom_id}")

    # X·ª≠ l√Ω menu ch·ªçn k√≠ch th∆∞·ªõc b·∫£ng
    if custom_id == "board_size":
        size = BOARD_SIZES.get(interaction.data.get("values")[0], 5)
        selected_board_size[interaction.user.id] = size
        print(f"üîç User {interaction.user.name} selected board size: {size}x{size}")
        await interaction.response.defer(ephemeral=True)
        return

    # X·ª≠ l√Ω Verify v√† Ticket
    if custom_id == "verify_button":
        await VerifyButton().verify_button(interaction, discord.ui.Button())
    elif custom_id == "verify2_button":
        await Verify2Button().verify2_button(interaction, discord.ui.Button())
    elif custom_id == "create_ticket":
        await CreateTicketView().create_ticket(interaction, discord.ui.Button())
    elif custom_id == "close":
        await CloseTicketView().close(interaction, discord.ui.Button())

    # X·ª≠ l√Ω Caro: Ch∆°i v·ªõi m√°y
    elif custom_id == "play_bot":
        size = selected_board_size.get(interaction.user.id, 5)
        print(f"üîç Board size for play_bot: {size}x{size}")

        guild = interaction.guild
        overwrites = {
            guild.default_role: discord.PermissionOverwrite(view_channel=False),
            interaction.user: discord.PermissionOverwrite(view_channel=True, send_messages=True),
            guild.me: discord.PermissionOverwrite(view_channel=True, send_messages=True)
        }
        try:
            channel = await guild.create_text_channel(f"caro-{interaction.user.name}", overwrites=overwrites)
            print(f"‚úÖ Created channel for play_bot: {channel.name}")
        except Exception as e:
            await interaction.response.send_message(f"‚ùå L·ªói khi t·∫°o k√™nh caro: {e}", ephemeral=True)
            print(f"‚ùå Error creating channel for play_bot: {e}")
            return

        game = CaroGame(interaction.user, is_bot=True, size=size)
        games[channel.id] = game
        game.create_board()

        embed = discord.Embed(title=f"C·ªù Caro {size}x{size}", description=f"L∆∞·ª£t c·ªßa {interaction.user.mention}\nT·ªça ƒë·ªô: A1 = (0,0), B2 = (1,1), ...", color=discord.Color.blue())
        view = discord.ui.View()
        component_count = 0
        for row in game.buttons:
            for button in row:
                if component_count < 23:
                    view.add_item(button)
                    component_count += 1
                else:
                    print(f"‚ùå Skipped adding button: Maximum components reached")

        control_view = discord.ui.View()
        close_button = discord.ui.Button(label="ƒê√≥ng Ticket", style=discord.ButtonStyle.danger, custom_id=f"close_caro_{channel.id}", disabled=True)
        replay_button = discord.ui.Button(label="Ch∆°i l·∫°i", style=discord.ButtonStyle.primary, custom_id=f"replay_{channel.id}", disabled=True)
        control_view.add_item(replay_button)
        control_view.add_item(close_button)

        try:
            board_message = await channel.send(embed=embed, view=view)
            board_messages[channel.id] = board_message.id
            control_message = await channel.send(view=control_view)
            control_messages[channel.id] = control_message.id
            print(f"‚úÖ Sent caro board (message_id: {board_message.id}) and controls (message_id: {control_message.id}) to channel: {channel.name}")
        except Exception as e:
            await interaction.response.send_message(f"‚ùå L·ªói khi g·ª≠i b·∫£ng caro: {e}", ephemeral=True)
            print(f"‚ùå Error sending caro board: {e}")
            return

        await interaction.response.send_message(f"Ticket ƒë√£ ƒë∆∞·ª£c t·∫°o t·∫°i {channel.mention}", ephemeral=True)

        while channel.id in games:
            if asyncio.get_event_loop().time() - games[channel.id].last_move_time > 30:
                try:
                    await channel.send(f"{interaction.user.mention} kh√¥ng thao t√°c trong 30 gi√¢y. Tr√≤ ch∆°i k·∫øt th√∫c!")
                    if channel.id in control_messages:
                        try:
                            control_message = await channel.fetch_message(control_messages[channel.id])
                            control_view = discord.ui.View()
                            close_button = discord.ui.Button(label="ƒê√≥ng Ticket", style=discord.ButtonStyle.danger, custom_id=f"close_caro_{channel.id}", disabled=False)
                            replay_button = discord.ui.Button(label="Ch∆°i l·∫°i", style=discord.ButtonStyle.primary, custom_id=f"replay_{channel.id}", disabled=False)
                            control_view.add_item(replay_button)
                            control_view.add_item(close_button)
                            await control_message.edit(view=control_view)
                            print(f"‚úÖ Enabled control buttons after timeout in channel: {channel.name}")
                        except Exception as e:
                            print(f"‚ùå Error enabling control buttons after timeout: {e}")
                    await channel.delete()
                    if channel.id in games:
                        del games[channel.id]
                    if channel.id in board_messages:
                        del board_messages[channel.id]
                    if channel.id in control_messages:
                        del control_messages[channel.id]
                except Exception as e:
                    print(f"‚ùå L·ªói khi x√≥a k√™nh caro: {e}")
                break
            await asyncio.sleep(5)

    # X·ª≠ l√Ω Caro: Ch∆°i v·ªõi ng∆∞·ªùi
    elif custom_id == "play_human":
        await interaction.response.send_message("Vui l√≤ng tag m·ªôt ng∆∞·ªùi ch∆°i kh√°c (kh√¥ng ph·∫£i bot ho·∫∑c ch√≠nh b·∫°n)!", ephemeral=True)
        def check(m):
            return m.author == interaction.user and m.channel == interaction.channel and len(m.mentions) == 1
        try:
            msg = await bot.wait_for("message", check=check, timeout=30)
            opponent = msg.mentions[0]
            print(f"üîç Opponent tagged: {opponent.name}")
            if opponent.bot:
                await interaction.followup.send("Kh√¥ng th·ªÉ ch∆°i v·ªõi bot! Vui l√≤ng tag m·ªôt ng∆∞·ªùi ch∆°i kh√°c.", ephemeral=True)
                print("‚ùå Tagged a bot")
                return
            if opponent == interaction.user:
                await interaction.followup.send("Kh√¥ng th·ªÉ ch∆°i v·ªõi ch√≠nh m√¨nh! Vui l√≤ng tag ng∆∞·ªùi kh√°c.", ephemeral=True)
                print("‚ùå Tagged self")
                return

            size = selected_board_size.get(interaction.user.id, 5)
            print(f"üîç Board size for play_human: {size}x{size}")

            guild = interaction.guild
            overwrites = {
                guild.default_role: discord.PermissionOverwrite(view_channel=False),
                interaction.user: discord.PermissionOverwrite(view_channel=True, send_messages=True),
                opponent: discord.PermissionOverwrite(view_channel=True, send_messages=True),
                guild.me: discord.PermissionOverwrite(view_channel=True, send_messages=True)
            }
            try:
                channel = await guild.create_text_channel(f"caro-{interaction.user.name}-vs-{opponent.name}", overwrites=overwrites)
                print(f"‚úÖ Created channel for play_human: {channel.name}")
            except Exception as e:
                await interaction.followup.send(f"‚ùå L·ªói khi t·∫°o k√™nh caro: {e}", ephemeral=True)
                print(f"‚ùå Error creating channel for play_human: {e}")
                return

            game = CaroGame(interaction.user, opponent, size=size)
            games[channel.id] = game
            game.create_board()

            embed = discord.Embed(title=f"C·ªù Caro {size}x{size}", description=f"L∆∞·ª£t c·ªßa {interaction.user.mention}\nT·ªça ƒë·ªô: A1 = (0,0), B2 = (1,1), ...", color=discord.Color.blue())
            view = discord.ui.View()
            component_count = 0
            for row in game.buttons:
                for button in row:
                    if component_count < 23:
                        view.add_item(button)
                        component_count += 1
                    else:
                        print(f"‚ùå Skipped adding button: Maximum components reached")

            control_view = discord.ui.View()
            close_button = discord.ui.Button(label="ƒê√≥ng Ticket", style=discord.ButtonStyle.danger, custom_id=f"close_caro_{channel.id}", disabled=True)
            replay_button = discord.ui.Button(label="Ch∆°i l·∫°i", style=discord.ButtonStyle.primary, custom_id=f"replay_{channel.id}", disabled=True)
            control_view.add_item(replay_button)
            control_view.add_item(close_button)

            try:
                board_message = await channel.send(embed=embed, view=view)
                board_messages[channel.id] = board_message.id
                control_message = await channel.send(view=control_view)
                control_messages[channel.id] = control_message.id
                print(f"‚úÖ Sent caro board (message_id: {board_message.id}) and controls (message_id: {control_message.id}) to channel: {channel.name}")
            except Exception as e:
                await interaction.followup.send(f"‚ùå L·ªói khi g·ª≠i b·∫£ng caro: {e}", ephemeral=True)
                print(f"‚ùå Error sending caro board: {e}")
                return

            await interaction.followup.send(f"Ticket ƒë√£ ƒë∆∞·ª£c t·∫°o t·∫°i {channel.mention}", ephemeral=True)

            while channel.id in games:
                if asyncio.get_event_loop().time() - games[channel.id].last_move_time > 30:
                    try:
                        await channel.send(f"{games[channel.id].current_player.mention} kh√¥ng thao t√°c trong 30 gi√¢y. Tr√≤ ch∆°i k·∫øt th√∫c!")
                        if channel.id in control_messages:
                            try:
                                control_message = await channel.fetch_message(control_messages[channel.id])
                                control_view = discord.ui.View()
                                close_button = discord.ui.Button(label="ƒê√≥ng Ticket", style=discord.ButtonStyle.danger, custom_id=f"close_caro_{channel.id}", disabled=False)
                                replay_button = discord.ui.Button(label="Ch∆°i l·∫°i", style=discord.ButtonStyle.primary, custom_id=f"replay_{channel.id}", disabled=False)
                                control_view.add_item(replay_button)
                                control_view.add_item(close_button)
                                await control_message.edit(view=control_view)
                                print(f"‚úÖ Enabled control buttons after timeout in channel: {channel.name}")
                            except Exception as e:
                                print(f"‚ùå Error enabling control buttons after timeout: {e}")
                        await channel.delete()
                        if channel.id in games:
                            del games[channel.id]
                        if channel.id in board_messages:
                            del board_messages[channel.id]
                        if channel.id in control_messages:
                            del control_messages[channel.id]
                    except Exception as e:
                        print(f"‚ùå L·ªói khi x√≥a k√™nh caro: {e}")
                    break
                await asyncio.sleep(5)

        except asyncio.TimeoutError:
            await interaction.followup.send("H·∫øt th·ªùi gian ch·ªù! Vui l√≤ng th·ª≠ l·∫°i.", ephemeral=True)
            print("‚ùå Timeout waiting for opponent tag")

    # X·ª≠ l√Ω nh·∫•n √¥ tr√™n b·∫£ng caro
    elif custom_id.startswith("caro_"):
        channel_id = interaction.channel_id
        if channel_id not in games:
            await interaction.response.send_message("Tr√≤ ch∆°i kh√¥ng t·ªìn t·∫°i!", ephemeral=True)
            print("‚ùå Game not found")
            return

        game = games[channel_id]
        if interaction.user != game.current_player and not (game.is_bot and interaction.user == game.player1):
            await interaction.response.send_message("Kh√¥ng ph·∫£i l∆∞·ª£t c·ªßa b·∫°n!", ephemeral=True)
            print(f"‚ùå Not your turn: {interaction.user.name}")
            return

        game.last_move_time = asyncio.get_event_loop().time()

        try:
            _, row, col = custom_id.split("_")
            row, col = int(row), int(col)
        except Exception as e:
            await interaction.response.send_message("‚ùå L·ªói khi x·ª≠ l√Ω n∆∞·ªõc ƒëi!", ephemeral=True)
            print(f"‚ùå Error parsing caro move: {e}")
            return

        game.board[row][col] = game.symbols[game.current_player]

        winner = game.check_winner(game.symbols[game.current_player])
        game.create_board()

        embed = discord.Embed(title=f"C·ªù Caro {game.size}x{game.size}", description=f"L∆∞·ª£t c·ªßa {game.current_player.mention}\nT·ªça ƒë·ªô: A1 = (0,0), B2 = (1,1), ...", color=discord.Color.blue())
        view = discord.ui.View()
        component_count = 0
        for row in game.buttons:
            for button in row:
                if component_count < 23:
                    view.add_item(button)
                    component_count += 1
                else:
                    print(f"‚ùå Skipped adding button: Maximum components reached")

        if winner == True:
            embed = discord.Embed(title=f"C·ªù Caro {game.size}x{game.size}", description=f"{interaction.user.mention} th·∫Øng!\nT·ªça ƒë·ªô: A1 = (0,0), B2 = (1,1), ...", color=discord.Color.green())
            await interaction.response.edit_message(embed=embed, view=view)
            if channel_id in control_messages:
                try:
                    control_message = await interaction.channel.fetch_message(control_messages[channel_id])
                    control_view = discord.ui.View()
                    close_button = discord.ui.Button(label="ƒê√≥ng Ticket", style=discord.ButtonStyle.danger, custom_id=f"close_caro_{channel_id}", disabled=False)
                    replay_button = discord.ui.Button(label="Ch∆°i l·∫°i", style=discord.ButtonStyle.primary, custom_id=f"replay_{channel_id}", disabled=False)
                    control_view.add_item(replay_button)
                    control_view.add_item(close_button)
                    await control_message.edit(view=control_view)
                    print(f"‚úÖ Enabled control buttons after win in channel: {interaction.channel.name}")
                except Exception as e:
                    print(f"‚ùå Error enabling control buttons: {e}")
            return
        elif winner == "draw":
            embed = discord.Embed(title=f"C·ªù Caro {game.size}x{game.size}", description="H√≤a!\nT·ªça ƒë·ªô: A1 = (0,0), B2 = (1,1), ...", color=discord.Color.yellow())
            await interaction.response.edit_message(embed=embed, view=view)
            if channel_id in control_messages:
                try:
                    control_message = await interaction.channel.fetch_message(control_messages[channel_id])
                    control_view = discord.ui.View()
                    close_button = discord.ui.Button(label="ƒê√≥ng Ticket", style=discord.ButtonStyle.danger, custom_id=f"close_caro_{channel_id}", disabled=False)
                    replay_button = discord.ui.Button(label="Ch∆°i l·∫°i", style=discord.ButtonStyle.primary, custom_id=f"replay_{channel_id}", disabled=False)
                    control_view.add_item(replay_button)
                    control_view.add_item(close_button)
                    await control_message.edit(view=control_view)
                    print(f"‚úÖ Enabled control buttons after draw in channel: {interaction.channel.name}")
                except Exception as e:
                    print(f"‚ùå Error enabling control buttons: {e}")
            return

        if game.is_bot:
            game.current_player = game.player2
            bot_move = game.bot_move()
            if bot_move:
                row, col = bot_move
                game.board[row][col] = game.symbols[game.player2]
                game.last_move_time = asyncio.get_event_loop().time()
                winner = game.check_winner(game.symbols[game.player2])
                game.create_board()

                view = discord.ui.View()
                component_count = 0
                for row in game.buttons:
                    for button in row:
                        if component_count < 23:
                            view.add_item(button)
                            component_count += 1
                        else:
                            print(f"‚ùå Skipped adding button: Maximum components reached")

                if winner == True:
                    embed = discord.Embed(title=f"C·ªù Caro {game.size}x{game.size}", description="Bot th·∫Øng!\nT·ªça ƒë·ªô: A1 = (0,0), B2 = (1,1), ...", color=discord.Color.red())
                    await interaction.response.edit_message(embed=embed, view=view)
                    if channel_id in control_messages:
                        try:
                            control_message = await interaction.channel.fetch_message(control_messages[channel_id])
                            control_view = discord.ui.View()
                            close_button = discord.ui.Button(label="ƒê√≥ng Ticket", style=discord.ButtonStyle.danger, custom_id=f"close_caro_{channel_id}", disabled=False)
                            replay_button = discord.ui.Button(label="Ch∆°i l·∫°i", style=discord.ButtonStyle.primary, custom_id=f"replay_{channel_id}", disabled=False)
                            control_view.add_item(replay_button)
                            control_view.add_item(close_button)
                            await control_message.edit(view=control_view)
                            print(f"‚úÖ Enabled control buttons after bot win in channel: {interaction.channel.name}")
                        except Exception as e:
                            print(f"‚ùå Error enabling control buttons: {e}")
                    return
                elif winner == "draw":
                    embed = discord.Embed(title=f"C·ªù Caro {game.size}x{game.size}", description="H√≤a!\nT·ªça ƒë·ªô: A1 = (0,0), B2 = (1,1), ...", color=discord.Color.yellow())
                    await interaction.response.edit_message(embed=embed, view=view)
                    if channel_id in control_messages:
                        try:
                            control_message = await interaction.channel.fetch_message(control_messages[channel_id])
                            control_view = discord.ui.View()
                            close_button = discord.ui.Button(label="ƒê√≥ng Ticket", style=discord.ButtonStyle.danger, custom_id=f"close_caro_{channel_id}", disabled=False)
                            replay_button = discord.ui.Button(label="Ch∆°i l·∫°i", style=discord.Button
